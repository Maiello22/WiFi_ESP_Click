
Wifi_Esp_click.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b40  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08003ce0  08003ce0  00013ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed0  08003ed0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed0  08003ed0  00013ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ed8  08003ed8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ed8  08003ed8  00013ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003ee0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b4  20000070  08003f50  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000424  08003f50  00020424  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008580  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001795  00000000  00000000  00028663  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000700  00000000  00000000  00029df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000557  00000000  00000000  0002a4f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000158fe  00000000  00000000  0002aa4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000093de  00000000  00000000  0004034d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000852d1  00000000  00000000  0004972b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000020e4  00000000  00000000  000ce9fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000d0ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000070 	.word	0x20000070
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003cc8 	.word	0x08003cc8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000074 	.word	0x20000074
 80001dc:	08003cc8 	.word	0x08003cc8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b598      	push	{r3, r4, r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 fe12 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f94c 	bl	8000830 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f000 fa0a 	bl	80009b0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f9b4 	bl	8000908 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80005a0:	f000 f9dc 	bl	800095c <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
// Attivo il modulo wifi e lo resetto
WiFi_Init();
 80005a4:	f000 fc8e 	bl	8000ec4 <WiFi_Init>
send_at_command("AT");
 80005a8:	4884      	ldr	r0, [pc, #528]	; (80007bc <main+0x230>)
 80005aa:	f000 fc39 	bl	8000e20 <send_at_command>
HAL_Delay(2000);
 80005ae:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b2:	f000 fe73 	bl	800129c <HAL_Delay>
send_at_command("AT+RST");
 80005b6:	4882      	ldr	r0, [pc, #520]	; (80007c0 <main+0x234>)
 80005b8:	f000 fc32 	bl	8000e20 <send_at_command>
HAL_Delay(2000);
 80005bc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c0:	f000 fe6c 	bl	800129c <HAL_Delay>


 // Attivo la modalità interrut per la ricezione della risposta
HAL_UART_Receive_IT(&huart6, rx_buffer + rx_index, 1);
 80005c4:	4b7f      	ldr	r3, [pc, #508]	; (80007c4 <main+0x238>)
 80005c6:	881b      	ldrh	r3, [r3, #0]
 80005c8:	461a      	mov	r2, r3
 80005ca:	4b7f      	ldr	r3, [pc, #508]	; (80007c8 <main+0x23c>)
 80005cc:	4413      	add	r3, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	4619      	mov	r1, r3
 80005d2:	487e      	ldr	r0, [pc, #504]	; (80007cc <main+0x240>)
 80005d4:	f001 ff3b 	bl	800244e <HAL_UART_Receive_IT>
HAL_Delay(2000);
 80005d8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005dc:	f000 fe5e 	bl	800129c <HAL_Delay>

//mando at commmand per impostare la modalità WiFi
  	  do{
  	  send_at_command("AT+CWMODE=1");
 80005e0:	487b      	ldr	r0, [pc, #492]	; (80007d0 <main+0x244>)
 80005e2:	f000 fc1d 	bl	8000e20 <send_at_command>
  	  HAL_Delay(500);
 80005e6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005ea:	f000 fe57 	bl	800129c <HAL_Delay>
  	  	  if (strstr((char*)rx_buffer, "OK\r\n") != NULL) {
 80005ee:	4979      	ldr	r1, [pc, #484]	; (80007d4 <main+0x248>)
 80005f0:	4875      	ldr	r0, [pc, #468]	; (80007c8 <main+0x23c>)
 80005f2:	f002 fecf 	bl	8003394 <strstr>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d009      	beq.n	8000610 <main+0x84>
  		  HAL_UART_Transmit(&huart2, (uint8_t *)"Imposto AP\r\n", strlen("Imposto AP\r\n"), HAL_MAX_DELAY);
 80005fc:	f04f 33ff 	mov.w	r3, #4294967295
 8000600:	220c      	movs	r2, #12
 8000602:	4975      	ldr	r1, [pc, #468]	; (80007d8 <main+0x24c>)
 8000604:	4875      	ldr	r0, [pc, #468]	; (80007dc <main+0x250>)
 8000606:	f001 fe97 	bl	8002338 <HAL_UART_Transmit>
  		  response_received = 1;} // Imposta il flag della risposta attesa
 800060a:	4b75      	ldr	r3, [pc, #468]	; (80007e0 <main+0x254>)
 800060c:	2201      	movs	r2, #1
 800060e:	601a      	str	r2, [r3, #0]
  	          }while(response_received != 1);
 8000610:	4b73      	ldr	r3, [pc, #460]	; (80007e0 <main+0x254>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	2b01      	cmp	r3, #1
 8000616:	d1e3      	bne.n	80005e0 <main+0x54>

  	  do{
  		  send_at_command("AT+CIPMUX=0");
 8000618:	4872      	ldr	r0, [pc, #456]	; (80007e4 <main+0x258>)
 800061a:	f000 fc01 	bl	8000e20 <send_at_command>
  		  HAL_Delay(500);
 800061e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000622:	f000 fe3b 	bl	800129c <HAL_Delay>
  	  	  if (strstr((char*)rx_buffer, "OK\r\n") != NULL) {
 8000626:	496b      	ldr	r1, [pc, #428]	; (80007d4 <main+0x248>)
 8000628:	4867      	ldr	r0, [pc, #412]	; (80007c8 <main+0x23c>)
 800062a:	f002 feb3 	bl	8003394 <strstr>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d009      	beq.n	8000648 <main+0xbc>
  		  HAL_UART_Transmit(&huart2, (uint8_t *)"Connessione singola\r\n", strlen("Connessione singola\r\n"), HAL_MAX_DELAY);
 8000634:	f04f 33ff 	mov.w	r3, #4294967295
 8000638:	2215      	movs	r2, #21
 800063a:	496b      	ldr	r1, [pc, #428]	; (80007e8 <main+0x25c>)
 800063c:	4867      	ldr	r0, [pc, #412]	; (80007dc <main+0x250>)
 800063e:	f001 fe7b 	bl	8002338 <HAL_UART_Transmit>
  		  response_received = 1;} // Imposta il flag della risposta attesa
 8000642:	4b67      	ldr	r3, [pc, #412]	; (80007e0 <main+0x254>)
 8000644:	2201      	movs	r2, #1
 8000646:	601a      	str	r2, [r3, #0]
  	          }while(response_received != 1);
 8000648:	4b65      	ldr	r3, [pc, #404]	; (80007e0 <main+0x254>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2b01      	cmp	r3, #1
 800064e:	d1e3      	bne.n	8000618 <main+0x8c>

 //Mi connetto al router
  	  do{
  		  HAL_UART_Transmit(&huart6, (uint8_t *)"AT+CWJAP=\"", strlen("AT+CWJAP=\""), HAL_MAX_DELAY);
 8000650:	f04f 33ff 	mov.w	r3, #4294967295
 8000654:	220a      	movs	r2, #10
 8000656:	4965      	ldr	r1, [pc, #404]	; (80007ec <main+0x260>)
 8000658:	485c      	ldr	r0, [pc, #368]	; (80007cc <main+0x240>)
 800065a:	f001 fe6d 	bl	8002338 <HAL_UART_Transmit>
  	      HAL_UART_Transmit(&huart6, (uint8_t *)SSID, strlen((char *)SSID), HAL_MAX_DELAY);
 800065e:	4b64      	ldr	r3, [pc, #400]	; (80007f0 <main+0x264>)
 8000660:	681c      	ldr	r4, [r3, #0]
 8000662:	4b63      	ldr	r3, [pc, #396]	; (80007f0 <main+0x264>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4618      	mov	r0, r3
 8000668:	f7ff fdba 	bl	80001e0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f04f 33ff 	mov.w	r3, #4294967295
 8000674:	4621      	mov	r1, r4
 8000676:	4855      	ldr	r0, [pc, #340]	; (80007cc <main+0x240>)
 8000678:	f001 fe5e 	bl	8002338 <HAL_UART_Transmit>
  	      HAL_UART_Transmit(&huart6, (uint8_t *)"\",\"", 3, HAL_MAX_DELAY);
 800067c:	f04f 33ff 	mov.w	r3, #4294967295
 8000680:	2203      	movs	r2, #3
 8000682:	495c      	ldr	r1, [pc, #368]	; (80007f4 <main+0x268>)
 8000684:	4851      	ldr	r0, [pc, #324]	; (80007cc <main+0x240>)
 8000686:	f001 fe57 	bl	8002338 <HAL_UART_Transmit>
  	      HAL_UART_Transmit(&huart6, (uint8_t *)password, strlen((char *)password), HAL_MAX_DELAY);
 800068a:	4b5b      	ldr	r3, [pc, #364]	; (80007f8 <main+0x26c>)
 800068c:	681c      	ldr	r4, [r3, #0]
 800068e:	4b5a      	ldr	r3, [pc, #360]	; (80007f8 <main+0x26c>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4618      	mov	r0, r3
 8000694:	f7ff fda4 	bl	80001e0 <strlen>
 8000698:	4603      	mov	r3, r0
 800069a:	b29a      	uxth	r2, r3
 800069c:	f04f 33ff 	mov.w	r3, #4294967295
 80006a0:	4621      	mov	r1, r4
 80006a2:	484a      	ldr	r0, [pc, #296]	; (80007cc <main+0x240>)
 80006a4:	f001 fe48 	bl	8002338 <HAL_UART_Transmit>
  	      HAL_UART_Transmit(&huart6, (uint8_t *)"\"\r\n", 3, HAL_MAX_DELAY);
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	2203      	movs	r2, #3
 80006ae:	4953      	ldr	r1, [pc, #332]	; (80007fc <main+0x270>)
 80006b0:	4846      	ldr	r0, [pc, #280]	; (80007cc <main+0x240>)
 80006b2:	f001 fe41 	bl	8002338 <HAL_UART_Transmit>
  	  	  HAL_Delay(8000);
 80006b6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 80006ba:	f000 fdef 	bl	800129c <HAL_Delay>
  	  	if (strstr((char*)rx_buffer, "WIFI GOT IP\r\n\r\nOK\r\n") != NULL) {
 80006be:	4950      	ldr	r1, [pc, #320]	; (8000800 <main+0x274>)
 80006c0:	4841      	ldr	r0, [pc, #260]	; (80007c8 <main+0x23c>)
 80006c2:	f002 fe67 	bl	8003394 <strstr>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d009      	beq.n	80006e0 <main+0x154>
  	  	  		  HAL_UART_Transmit(&huart2, (uint8_t *)"Connesso al router\r\n", strlen("Connesso al router\r\n"), HAL_MAX_DELAY);
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	2214      	movs	r2, #20
 80006d2:	494c      	ldr	r1, [pc, #304]	; (8000804 <main+0x278>)
 80006d4:	4841      	ldr	r0, [pc, #260]	; (80007dc <main+0x250>)
 80006d6:	f001 fe2f 	bl	8002338 <HAL_UART_Transmit>
  	  	  		  response_received = 1;} // Imposta il flag della risposta attesa
 80006da:	4b41      	ldr	r3, [pc, #260]	; (80007e0 <main+0x254>)
 80006dc:	2201      	movs	r2, #1
 80006de:	601a      	str	r2, [r3, #0]

  	  	  }while(response_received != 1);
 80006e0:	4b3f      	ldr	r3, [pc, #252]	; (80007e0 <main+0x254>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b01      	cmp	r3, #1
 80006e6:	d1b3      	bne.n	8000650 <main+0xc4>


//inizializzo una connessione tcp per il collegamento al broker hivemqtt

  	 do{	send_at_command("AT+CIPSTART=\"TCP\",\"broker.hivemq.com\",1883");
 80006e8:	4847      	ldr	r0, [pc, #284]	; (8000808 <main+0x27c>)
 80006ea:	f000 fb99 	bl	8000e20 <send_at_command>
  	 	 	 HAL_Delay(1500);
 80006ee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80006f2:	f000 fdd3 	bl	800129c <HAL_Delay>
  	  	  	  if (strstr((char*)rx_buffer, "CONNECT\r\n") != NULL) {
 80006f6:	4945      	ldr	r1, [pc, #276]	; (800080c <main+0x280>)
 80006f8:	4833      	ldr	r0, [pc, #204]	; (80007c8 <main+0x23c>)
 80006fa:	f002 fe4b 	bl	8003394 <strstr>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d009      	beq.n	8000718 <main+0x18c>
  	  		  HAL_UART_Transmit(&huart2, (uint8_t *)"Connessione MQTT riuscita\r\n", strlen("Connessione MQTT riuscita\r\n"), HAL_MAX_DELAY);
 8000704:	f04f 33ff 	mov.w	r3, #4294967295
 8000708:	221b      	movs	r2, #27
 800070a:	4941      	ldr	r1, [pc, #260]	; (8000810 <main+0x284>)
 800070c:	4833      	ldr	r0, [pc, #204]	; (80007dc <main+0x250>)
 800070e:	f001 fe13 	bl	8002338 <HAL_UART_Transmit>
  	  		  response_received = 1;} // Imposta il flag della risposta attesa
 8000712:	4b33      	ldr	r3, [pc, #204]	; (80007e0 <main+0x254>)
 8000714:	2201      	movs	r2, #1
 8000716:	601a      	str	r2, [r3, #0]
  	  	          }while(response_received != 1);
 8000718:	4b31      	ldr	r3, [pc, #196]	; (80007e0 <main+0x254>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	2b01      	cmp	r3, #1
 800071e:	d1e3      	bne.n	80006e8 <main+0x15c>



//Mando il pacchetto per la connessione e il client id
  	 do{	  	MQTT_Connect(MQTT_CLIENT_ID);
 8000720:	4b3c      	ldr	r3, [pc, #240]	; (8000814 <main+0x288>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f000 f9c7 	bl	8000ab8 <MQTT_Connect>

  	  	  	  	  if (strstr((char*)rx_buffer, "SEND OK\r\n") != NULL) {
 800072a:	493b      	ldr	r1, [pc, #236]	; (8000818 <main+0x28c>)
 800072c:	4826      	ldr	r0, [pc, #152]	; (80007c8 <main+0x23c>)
 800072e:	f002 fe31 	bl	8003394 <strstr>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d009      	beq.n	800074c <main+0x1c0>
  	  	  		  HAL_UART_Transmit(&huart2, (uint8_t *)"Client ID e pacchetto mandato\r\n", strlen("Client ID e pacchetto mandato\r\n"), HAL_MAX_DELAY);
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	221f      	movs	r2, #31
 800073e:	4937      	ldr	r1, [pc, #220]	; (800081c <main+0x290>)
 8000740:	4826      	ldr	r0, [pc, #152]	; (80007dc <main+0x250>)
 8000742:	f001 fdf9 	bl	8002338 <HAL_UART_Transmit>
  	  	  		  response_received = 1;} // Imposta il flag della risposta attesa
 8000746:	4b26      	ldr	r3, [pc, #152]	; (80007e0 <main+0x254>)
 8000748:	2201      	movs	r2, #1
 800074a:	601a      	str	r2, [r3, #0]
  	  	  	          }while(response_received != 1);
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <main+0x254>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b01      	cmp	r3, #1
 8000752:	d1e5      	bne.n	8000720 <main+0x194>


//pubblico il messaggio in un determinato topic
  	 do{	  	MQTT_Publish(MQTT_TOPIC,MQTT_MESSAGE);
 8000754:	4b32      	ldr	r3, [pc, #200]	; (8000820 <main+0x294>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a32      	ldr	r2, [pc, #200]	; (8000824 <main+0x298>)
 800075a:	6812      	ldr	r2, [r2, #0]
 800075c:	4611      	mov	r1, r2
 800075e:	4618      	mov	r0, r3
 8000760:	f000 faa8 	bl	8000cb4 <MQTT_Publish>

  	  	  	  	  if (strstr((char*)rx_buffer, "SEND OK\r\n") != NULL) {
 8000764:	492c      	ldr	r1, [pc, #176]	; (8000818 <main+0x28c>)
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <main+0x23c>)
 8000768:	f002 fe14 	bl	8003394 <strstr>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d009      	beq.n	8000786 <main+0x1fa>
  	  	  		  HAL_UART_Transmit(&huart2, (uint8_t *)"Messaggio pubblicato\r\n", strlen("Messaggio pubblicato\r\n"), HAL_MAX_DELAY);
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	2216      	movs	r2, #22
 8000778:	492b      	ldr	r1, [pc, #172]	; (8000828 <main+0x29c>)
 800077a:	4818      	ldr	r0, [pc, #96]	; (80007dc <main+0x250>)
 800077c:	f001 fddc 	bl	8002338 <HAL_UART_Transmit>
  	  	  		  response_received = 1;} // Imposta il flag della risposta attesa
 8000780:	4b17      	ldr	r3, [pc, #92]	; (80007e0 <main+0x254>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
  	  	  	          }while(response_received != 1);
 8000786:	4b16      	ldr	r3, [pc, #88]	; (80007e0 <main+0x254>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	2b01      	cmp	r3, #1
 800078c:	d1e2      	bne.n	8000754 <main+0x1c8>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  //visualizzo tutte le risposte che ho nel buffer, ricevute dal modulo esp
	  while(c<1 ){
 800078e:	e00f      	b.n	80007b0 <main+0x224>
	 		  HAL_UART_Transmit(&huart2, (uint8_t*)&rx_buffer[c], RX_BUFFER_SIZE , HAL_MAX_DELAY);
 8000790:	4b26      	ldr	r3, [pc, #152]	; (800082c <main+0x2a0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4a0c      	ldr	r2, [pc, #48]	; (80007c8 <main+0x23c>)
 8000796:	1899      	adds	r1, r3, r2
 8000798:	f04f 33ff 	mov.w	r3, #4294967295
 800079c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80007a0:	480e      	ldr	r0, [pc, #56]	; (80007dc <main+0x250>)
 80007a2:	f001 fdc9 	bl	8002338 <HAL_UART_Transmit>
	 		  c++;}
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <main+0x2a0>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a1f      	ldr	r2, [pc, #124]	; (800082c <main+0x2a0>)
 80007ae:	6013      	str	r3, [r2, #0]
	  while(c<1 ){
 80007b0:	4b1e      	ldr	r3, [pc, #120]	; (800082c <main+0x2a0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	ddeb      	ble.n	8000790 <main+0x204>
 80007b8:	e7fa      	b.n	80007b0 <main+0x224>
 80007ba:	bf00      	nop
 80007bc:	08003d44 	.word	0x08003d44
 80007c0:	08003d48 	.word	0x08003d48
 80007c4:	20000248 	.word	0x20000248
 80007c8:	2000011c 	.word	0x2000011c
 80007cc:	200000d4 	.word	0x200000d4
 80007d0:	08003d50 	.word	0x08003d50
 80007d4:	08003d5c 	.word	0x08003d5c
 80007d8:	08003d64 	.word	0x08003d64
 80007dc:	2000008c 	.word	0x2000008c
 80007e0:	200002d0 	.word	0x200002d0
 80007e4:	08003d74 	.word	0x08003d74
 80007e8:	08003d80 	.word	0x08003d80
 80007ec:	08003d98 	.word	0x08003d98
 80007f0:	20000000 	.word	0x20000000
 80007f4:	08003da4 	.word	0x08003da4
 80007f8:	20000004 	.word	0x20000004
 80007fc:	08003da8 	.word	0x08003da8
 8000800:	08003dac 	.word	0x08003dac
 8000804:	08003dc0 	.word	0x08003dc0
 8000808:	08003dd8 	.word	0x08003dd8
 800080c:	08003e04 	.word	0x08003e04
 8000810:	08003e10 	.word	0x08003e10
 8000814:	20000008 	.word	0x20000008
 8000818:	08003e2c 	.word	0x08003e2c
 800081c:	08003e38 	.word	0x08003e38
 8000820:	2000000c 	.word	0x2000000c
 8000824:	20000010 	.word	0x20000010
 8000828:	08003e58 	.word	0x08003e58
 800082c:	200002cc 	.word	0x200002cc

08000830 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b094      	sub	sp, #80	; 0x50
 8000834:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000836:	f107 0320 	add.w	r3, r7, #32
 800083a:	2230      	movs	r2, #48	; 0x30
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f002 fda0 	bl	8003384 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000844:	f107 030c 	add.w	r3, r7, #12
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
 8000858:	4b29      	ldr	r3, [pc, #164]	; (8000900 <SystemClock_Config+0xd0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	4a28      	ldr	r2, [pc, #160]	; (8000900 <SystemClock_Config+0xd0>)
 800085e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000862:	6413      	str	r3, [r2, #64]	; 0x40
 8000864:	4b26      	ldr	r3, [pc, #152]	; (8000900 <SystemClock_Config+0xd0>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	4b23      	ldr	r3, [pc, #140]	; (8000904 <SystemClock_Config+0xd4>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800087c:	4a21      	ldr	r2, [pc, #132]	; (8000904 <SystemClock_Config+0xd4>)
 800087e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000882:	6013      	str	r3, [r2, #0]
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <SystemClock_Config+0xd4>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000890:	2302      	movs	r3, #2
 8000892:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000894:	2301      	movs	r3, #1
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000898:	2310      	movs	r3, #16
 800089a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800089c:	2302      	movs	r3, #2
 800089e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008a0:	2300      	movs	r3, #0
 80008a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008a4:	2310      	movs	r3, #16
 80008a6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008a8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008ac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008ae:	2304      	movs	r3, #4
 80008b0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80008b2:	2307      	movs	r3, #7
 80008b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	4618      	mov	r0, r3
 80008bc:	f001 f854 	bl	8001968 <HAL_RCC_OscConfig>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80008c6:	f000 fb1d 	bl	8000f04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ca:	230f      	movs	r3, #15
 80008cc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ce:	2302      	movs	r3, #2
 80008d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008d2:	2300      	movs	r3, #0
 80008d4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008da:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008dc:	2300      	movs	r3, #0
 80008de:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2102      	movs	r1, #2
 80008e6:	4618      	mov	r0, r3
 80008e8:	f001 fab6 	bl	8001e58 <HAL_RCC_ClockConfig>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d001      	beq.n	80008f6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80008f2:	f000 fb07 	bl	8000f04 <Error_Handler>
  }
}
 80008f6:	bf00      	nop
 80008f8:	3750      	adds	r7, #80	; 0x50
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800090e:	4a12      	ldr	r2, [pc, #72]	; (8000958 <MX_USART2_UART_Init+0x50>)
 8000910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800091a:	4b0e      	ldr	r3, [pc, #56]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000920:	4b0c      	ldr	r3, [pc, #48]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000926:	4b0b      	ldr	r3, [pc, #44]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800092c:	4b09      	ldr	r3, [pc, #36]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800092e:	220c      	movs	r2, #12
 8000930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000932:	4b08      	ldr	r3, [pc, #32]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000938:	4b06      	ldr	r3, [pc, #24]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 800093a:	2200      	movs	r2, #0
 800093c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800093e:	4805      	ldr	r0, [pc, #20]	; (8000954 <MX_USART2_UART_Init+0x4c>)
 8000940:	f001 fcaa 	bl	8002298 <HAL_UART_Init>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800094a:	f000 fadb 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	2000008c 	.word	0x2000008c
 8000958:	40004400 	.word	0x40004400

0800095c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000960:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000962:	4a12      	ldr	r2, [pc, #72]	; (80009ac <MX_USART6_UART_Init+0x50>)
 8000964:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000966:	4b10      	ldr	r3, [pc, #64]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800096c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800096e:	4b0e      	ldr	r3, [pc, #56]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000976:	2200      	movs	r2, #0
 8000978:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 800097c:	2200      	movs	r2, #0
 800097e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000980:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000982:	220c      	movs	r2, #12
 8000984:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000986:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_USART6_UART_Init+0x4c>)
 8000994:	f001 fc80 	bl	8002298 <HAL_UART_Init>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800099e:	f000 fab1 	bl	8000f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	200000d4 	.word	0x200000d4
 80009ac:	40011400 	.word	0x40011400

080009b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]
 80009c0:	609a      	str	r2, [r3, #8]
 80009c2:	60da      	str	r2, [r3, #12]
 80009c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	613b      	str	r3, [r7, #16]
 80009ca:	4b37      	ldr	r3, [pc, #220]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a36      	ldr	r2, [pc, #216]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009d0:	f043 0304 	orr.w	r3, r3, #4
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b34      	ldr	r3, [pc, #208]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0304 	and.w	r3, r3, #4
 80009de:	613b      	str	r3, [r7, #16]
 80009e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	60fb      	str	r3, [r7, #12]
 80009e6:	4b30      	ldr	r3, [pc, #192]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a2f      	ldr	r2, [pc, #188]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b2d      	ldr	r3, [pc, #180]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009fa:	60fb      	str	r3, [r7, #12]
 80009fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a28      	ldr	r2, [pc, #160]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b26      	ldr	r3, [pc, #152]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	60bb      	str	r3, [r7, #8]
 8000a18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	4b22      	ldr	r3, [pc, #136]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	4a21      	ldr	r2, [pc, #132]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a24:	f043 0302 	orr.w	r3, r3, #2
 8000a28:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_GPIO_Init+0xf8>)
 8000a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2e:	f003 0302 	and.w	r3, r3, #2
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2120      	movs	r1, #32
 8000a3a:	481c      	ldr	r0, [pc, #112]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a3c:	f000 ff7a 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Reset_esp_Pin|Enable_esp_Pin, GPIO_PIN_RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	2141      	movs	r1, #65	; 0x41
 8000a44:	481a      	ldr	r0, [pc, #104]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a46:	f000 ff75 	bl	8001934 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a50:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000a54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	2300      	movs	r3, #0
 8000a58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a5a:	f107 0314 	add.w	r3, r7, #20
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <MX_GPIO_Init+0x104>)
 8000a62:	f000 fde3 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a66:	2320      	movs	r3, #32
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a72:	2300      	movs	r3, #0
 8000a74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a76:	f107 0314 	add.w	r3, r7, #20
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	480b      	ldr	r0, [pc, #44]	; (8000aac <MX_GPIO_Init+0xfc>)
 8000a7e:	f000 fdd5 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : Reset_esp_Pin Enable_esp_Pin */
  GPIO_InitStruct.Pin = Reset_esp_Pin|Enable_esp_Pin;
 8000a82:	2341      	movs	r3, #65	; 0x41
 8000a84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a86:	2301      	movs	r3, #1
 8000a88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a92:	f107 0314 	add.w	r3, r7, #20
 8000a96:	4619      	mov	r1, r3
 8000a98:	4805      	ldr	r0, [pc, #20]	; (8000ab0 <MX_GPIO_Init+0x100>)
 8000a9a:	f000 fdc7 	bl	800162c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a9e:	bf00      	nop
 8000aa0:	3728      	adds	r7, #40	; 0x28
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	40020800 	.word	0x40020800

08000ab8 <MQTT_Connect>:

/* USER CODE BEGIN 4 */
void MQTT_Connect(const char* client_id) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ac4:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ac8:	6018      	str	r0, [r3, #0]
    char cmd[256];
    int client_id_len = strlen(client_id);
 8000aca:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000ace:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000ad2:	6818      	ldr	r0, [r3, #0]
 8000ad4:	f7ff fb84 	bl	80001e0 <strlen>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    int packet_len = 12 + client_id_len; // Lunghezza del pacchetto MQTT CONNECT
 8000ade:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000ae2:	330c      	adds	r3, #12
 8000ae4:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    int cmd_length;

    // Calcola la lunghezza del comando AT+CIPSEND
    cmd_length = sprintf(cmd, "AT+CIPSEND=%d\r\n", packet_len + 2);
 8000ae8:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000aec:	1c9a      	adds	r2, r3, #2
 8000aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8000af2:	496e      	ldr	r1, [pc, #440]	; (8000cac <MQTT_Connect+0x1f4>)
 8000af4:	4618      	mov	r0, r3
 8000af6:	f002 fc25 	bl	8003344 <siprintf>
 8000afa:	f8c7 020c 	str.w	r0, [r7, #524]	; 0x20c
    HAL_UART_Transmit(&huart6, (uint8_t*)cmd, cmd_length, HAL_MAX_DELAY);
 8000afe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000b02:	b29a      	uxth	r2, r3
 8000b04:	f507 7184 	add.w	r1, r7, #264	; 0x108
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	4868      	ldr	r0, [pc, #416]	; (8000cb0 <MQTT_Connect+0x1f8>)
 8000b0e:	f001 fc13 	bl	8002338 <HAL_UART_Transmit>

    // Attendi per un po' (200 ms)
    HAL_Delay(200);
 8000b12:	20c8      	movs	r0, #200	; 0xc8
 8000b14:	f000 fbc2 	bl	800129c <HAL_Delay>

    // Costruisci il pacchetto MQTT CONNECT
    uint8_t connect_packet[256];
    int index = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    connect_packet[index++] = 0x10; // Tipo di messaggio: CONNECT
 8000b1e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b22:	1c5a      	adds	r2, r3, #1
 8000b24:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000b28:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000b2c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000b30:	2110      	movs	r1, #16
 8000b32:	54d1      	strb	r1, [r2, r3]
    connect_packet[index++] = packet_len; // Lunghezza del rimanente
 8000b34:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b38:	1c5a      	adds	r2, r3, #1
 8000b3a:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000b3e:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8000b42:	b2d1      	uxtb	r1, r2
 8000b44:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000b48:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000b4c:	54d1      	strb	r1, [r2, r3]

    // Variabile header
    connect_packet[index++] = 0x00; connect_packet[index++] = 0x04; // Lunghezza del protocollo
 8000b4e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b52:	1c5a      	adds	r2, r3, #1
 8000b54:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000b58:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000b5c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000b60:	2100      	movs	r1, #0
 8000b62:	54d1      	strb	r1, [r2, r3]
 8000b64:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b68:	1c5a      	adds	r2, r3, #1
 8000b6a:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000b6e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000b72:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000b76:	2104      	movs	r1, #4
 8000b78:	54d1      	strb	r1, [r2, r3]
    connect_packet[index++] = 'M'; connect_packet[index++] = 'Q'; connect_packet[index++] = 'T'; connect_packet[index++] = 'T'; // Nome del protocollo
 8000b7a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b7e:	1c5a      	adds	r2, r3, #1
 8000b80:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000b84:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000b88:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000b8c:	214d      	movs	r1, #77	; 0x4d
 8000b8e:	54d1      	strb	r1, [r2, r3]
 8000b90:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000b94:	1c5a      	adds	r2, r3, #1
 8000b96:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000b9a:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000b9e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000ba2:	2151      	movs	r1, #81	; 0x51
 8000ba4:	54d1      	strb	r1, [r2, r3]
 8000ba6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000baa:	1c5a      	adds	r2, r3, #1
 8000bac:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000bb0:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000bb4:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000bb8:	2154      	movs	r1, #84	; 0x54
 8000bba:	54d1      	strb	r1, [r2, r3]
 8000bbc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000bc0:	1c5a      	adds	r2, r3, #1
 8000bc2:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000bc6:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000bca:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000bce:	2154      	movs	r1, #84	; 0x54
 8000bd0:	54d1      	strb	r1, [r2, r3]
    connect_packet[index++] = 0x04; // Livello del protocollo
 8000bd2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000bd6:	1c5a      	adds	r2, r3, #1
 8000bd8:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000bdc:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000be0:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000be4:	2104      	movs	r1, #4
 8000be6:	54d1      	strb	r1, [r2, r3]
    connect_packet[index++] = 0x02; // Connessione flag: Clean session
 8000be8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000bec:	1c5a      	adds	r2, r3, #1
 8000bee:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000bf2:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000bf6:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	54d1      	strb	r1, [r2, r3]
    connect_packet[index++] = 0x00; connect_packet[index++] = 0x3C; // Keep-alive: 60 secondi
 8000bfe:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000c08:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000c0c:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000c10:	2100      	movs	r1, #0
 8000c12:	54d1      	strb	r1, [r2, r3]
 8000c14:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c18:	1c5a      	adds	r2, r3, #1
 8000c1a:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000c1e:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000c22:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000c26:	213c      	movs	r1, #60	; 0x3c
 8000c28:	54d1      	strb	r1, [r2, r3]

    // Payload
    connect_packet[index++] = 0x00; connect_packet[index++] = client_id_len; // Lunghezza del client ID
 8000c2a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c2e:	1c5a      	adds	r2, r3, #1
 8000c30:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000c34:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000c38:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	54d1      	strb	r1, [r2, r3]
 8000c40:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c44:	1c5a      	adds	r2, r3, #1
 8000c46:	f8c7 2208 	str.w	r2, [r7, #520]	; 0x208
 8000c4a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c4e:	b2d1      	uxtb	r1, r2
 8000c50:	f507 7206 	add.w	r2, r7, #536	; 0x218
 8000c54:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8000c58:	54d1      	strb	r1, [r2, r3]
    memcpy(&connect_packet[index], client_id, client_id_len); // Client ID
 8000c5a:	f107 0208 	add.w	r2, r7, #8
 8000c5e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c62:	18d0      	adds	r0, r2, r3
 8000c64:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000c68:	f507 7306 	add.w	r3, r7, #536	; 0x218
 8000c6c:	f5a3 7305 	sub.w	r3, r3, #532	; 0x214
 8000c70:	6819      	ldr	r1, [r3, #0]
 8000c72:	f002 fbd9 	bl	8003428 <memcpy>
    index += client_id_len;
 8000c76:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8000c7a:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000c7e:	4413      	add	r3, r2
 8000c80:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

    // Invia il pacchetto CONNECT
    HAL_UART_Transmit(&huart6, connect_packet, index, HAL_MAX_DELAY);
 8000c84:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	f107 0108 	add.w	r1, r7, #8
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	4807      	ldr	r0, [pc, #28]	; (8000cb0 <MQTT_Connect+0x1f8>)
 8000c94:	f001 fb50 	bl	8002338 <HAL_UART_Transmit>

    // Attendi per un po' (2000 ms) per completare la connessione
    HAL_Delay(2000);
 8000c98:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c9c:	f000 fafe 	bl	800129c <HAL_Delay>
}
 8000ca0:	bf00      	nop
 8000ca2:	f507 7706 	add.w	r7, r7, #536	; 0x218
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	08003e70 	.word	0x08003e70
 8000cb0:	200000d4 	.word	0x200000d4

08000cb4 <MQTT_Publish>:

void MQTT_Publish(const char* topic, const char* message) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000cc0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000cc4:	6018      	str	r0, [r3, #0]
 8000cc6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000cca:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000cce:	6019      	str	r1, [r3, #0]
    char cmd[256];
    int topic_len = strlen(topic);
 8000cd0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000cd4:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000cd8:	6818      	ldr	r0, [r3, #0]
 8000cda:	f7ff fa81 	bl	80001e0 <strlen>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    int message_len = strlen(message);
 8000ce4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000ce8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	f7ff fa77 	bl	80001e0 <strlen>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    int msg_len = topic_len + message_len + 2; // Lunghezza del topic + lunghezza del messaggio + 2 byte per la lunghezza del topic
 8000cf8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000cfc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000d00:	4413      	add	r3, r2
 8000d02:	3302      	adds	r3, #2
 8000d04:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    int cmd_length;

    // Calcola e invia il comando AT+CIPSEND
    cmd_length = sprintf(cmd, "AT+CIPSEND=%d\r\n", msg_len + 2);
 8000d08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8000d0c:	1c9a      	adds	r2, r3, #2
 8000d0e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8000d12:	4941      	ldr	r1, [pc, #260]	; (8000e18 <MQTT_Publish+0x164>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f002 fb15 	bl	8003344 <siprintf>
 8000d1a:	f8c7 0210 	str.w	r0, [r7, #528]	; 0x210
    HAL_UART_Transmit(&huart6, (uint8_t*)cmd, cmd_length, HAL_MAX_DELAY);
 8000d1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8000d22:	b29a      	uxth	r2, r3
 8000d24:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8000d28:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2c:	483b      	ldr	r0, [pc, #236]	; (8000e1c <MQTT_Publish+0x168>)
 8000d2e:	f001 fb03 	bl	8002338 <HAL_UART_Transmit>

    // Attendi per un po' (200 ms)
    HAL_Delay(200);
 8000d32:	20c8      	movs	r0, #200	; 0xc8
 8000d34:	f000 fab2 	bl	800129c <HAL_Delay>

    // Costruisci il pacchetto MQTT PUBLISH
    uint8_t publish_packet[256];
    int index = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    publish_packet[index++] = 0x30; // Tipo di messaggio: PUBLISH
 8000d3e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d42:	1c5a      	adds	r2, r3, #1
 8000d44:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000d48:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000d4c:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000d50:	2130      	movs	r1, #48	; 0x30
 8000d52:	54d1      	strb	r1, [r2, r3]
    publish_packet[index++] = msg_len; // Lunghezza del rimanente
 8000d54:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d58:	1c5a      	adds	r2, r3, #1
 8000d5a:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000d5e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8000d62:	b2d1      	uxtb	r1, r2
 8000d64:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000d68:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000d6c:	54d1      	strb	r1, [r2, r3]

    // Variabile header
    publish_packet[index++] = 0x00; publish_packet[index++] = topic_len; // Lunghezza del topic
 8000d6e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d72:	1c5a      	adds	r2, r3, #1
 8000d74:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000d78:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000d7c:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000d80:	2100      	movs	r1, #0
 8000d82:	54d1      	strb	r1, [r2, r3]
 8000d84:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000d88:	1c5a      	adds	r2, r3, #1
 8000d8a:	f8c7 220c 	str.w	r2, [r7, #524]	; 0x20c
 8000d8e:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000d92:	b2d1      	uxtb	r1, r2
 8000d94:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8000d98:	f5a2 7205 	sub.w	r2, r2, #532	; 0x214
 8000d9c:	54d1      	strb	r1, [r2, r3]
    memcpy(&publish_packet[index], topic, topic_len); // Topic
 8000d9e:	f107 020c 	add.w	r2, r7, #12
 8000da2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000da6:	18d0      	adds	r0, r2, r3
 8000da8:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8000dac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000db0:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8000db4:	6819      	ldr	r1, [r3, #0]
 8000db6:	f002 fb37 	bl	8003428 <memcpy>
    index += topic_len;
 8000dba:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000dbe:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8000dc2:	4413      	add	r3, r2
 8000dc4:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    // Payload
    memcpy(&publish_packet[index], message, message_len); // Messaggio
 8000dc8:	f107 020c 	add.w	r2, r7, #12
 8000dcc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000dd0:	18d0      	adds	r0, r2, r3
 8000dd2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8000dd6:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8000dda:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	f002 fb22 	bl	8003428 <memcpy>
    index += message_len;
 8000de4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8000de8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8000dec:	4413      	add	r3, r2
 8000dee:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    // Invia il pacchetto PUBLISH
    HAL_UART_Transmit(&huart6, publish_packet, index, HAL_MAX_DELAY);
 8000df2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8000df6:	b29a      	uxth	r2, r3
 8000df8:	f107 010c 	add.w	r1, r7, #12
 8000dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8000e00:	4806      	ldr	r0, [pc, #24]	; (8000e1c <MQTT_Publish+0x168>)
 8000e02:	f001 fa99 	bl	8002338 <HAL_UART_Transmit>

    // Attendi per un po' (1000 ms) per completare la pubblicazione
    HAL_Delay(1000);
 8000e06:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0a:	f000 fa47 	bl	800129c <HAL_Delay>
}
 8000e0e:	bf00      	nop
 8000e10:	f507 7708 	add.w	r7, r7, #544	; 0x220
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bd80      	pop	{r7, pc}
 8000e18:	08003e70 	.word	0x08003e70
 8000e1c:	200000d4 	.word	0x200000d4

08000e20 <send_at_command>:




void send_at_command(const char *command) {
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
    strcpy((char *)tx_buffer, command);
 8000e28:	6879      	ldr	r1, [r7, #4]
 8000e2a:	480c      	ldr	r0, [pc, #48]	; (8000e5c <send_at_command+0x3c>)
 8000e2c:	f002 faf4 	bl	8003418 <strcpy>
    HAL_UART_Transmit(&huart6, tx_buffer, strlen(command), HAL_MAX_DELAY);
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f7ff f9d5 	bl	80001e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	4907      	ldr	r1, [pc, #28]	; (8000e5c <send_at_command+0x3c>)
 8000e40:	4807      	ldr	r0, [pc, #28]	; (8000e60 <send_at_command+0x40>)
 8000e42:	f001 fa79 	bl	8002338 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart6, (uint8_t *)"\r\n", strlen("\r\n"), HAL_MAX_DELAY);
 8000e46:	f04f 33ff 	mov.w	r3, #4294967295
 8000e4a:	2202      	movs	r2, #2
 8000e4c:	4905      	ldr	r1, [pc, #20]	; (8000e64 <send_at_command+0x44>)
 8000e4e:	4804      	ldr	r0, [pc, #16]	; (8000e60 <send_at_command+0x40>)
 8000e50:	f001 fa72 	bl	8002338 <HAL_UART_Transmit>

}
 8000e54:	bf00      	nop
 8000e56:	3708      	adds	r7, #8
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	2000024c 	.word	0x2000024c
 8000e60:	200000d4 	.word	0x200000d4
 8000e64:	08003e80 	.word	0x08003e80

08000e68 <HAL_UART_RxCpltCallback>:





void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART6) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a0f      	ldr	r2, [pc, #60]	; (8000eb4 <HAL_UART_RxCpltCallback+0x4c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d118      	bne.n	8000eac <HAL_UART_RxCpltCallback+0x44>
        if (rx_index < RX_BUFFER_SIZE - 1) {
 8000e7a:	4b0f      	ldr	r3, [pc, #60]	; (8000eb8 <HAL_UART_RxCpltCallback+0x50>)
 8000e7c:	881b      	ldrh	r3, [r3, #0]
 8000e7e:	f5b3 7f95 	cmp.w	r3, #298	; 0x12a
 8000e82:	d806      	bhi.n	8000e92 <HAL_UART_RxCpltCallback+0x2a>

rx_index++; }else {
 8000e84:	4b0c      	ldr	r3, [pc, #48]	; (8000eb8 <HAL_UART_RxCpltCallback+0x50>)
 8000e86:	881b      	ldrh	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_UART_RxCpltCallback+0x50>)
 8000e8e:	801a      	strh	r2, [r3, #0]
 8000e90:	e002      	b.n	8000e98 <HAL_UART_RxCpltCallback+0x30>
           rx_index = 0;  // Gestione overflow
 8000e92:	4b09      	ldr	r3, [pc, #36]	; (8000eb8 <HAL_UART_RxCpltCallback+0x50>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	801a      	strh	r2, [r3, #0]
}
HAL_UART_Receive_IT(&huart6, rx_buffer + rx_index, 1); // Ripristina l'interrupt di ricezione
 8000e98:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <HAL_UART_RxCpltCallback+0x50>)
 8000e9a:	881b      	ldrh	r3, [r3, #0]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	4b07      	ldr	r3, [pc, #28]	; (8000ebc <HAL_UART_RxCpltCallback+0x54>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4806      	ldr	r0, [pc, #24]	; (8000ec0 <HAL_UART_RxCpltCallback+0x58>)
 8000ea8:	f001 fad1 	bl	800244e <HAL_UART_Receive_IT>
}}
 8000eac:	bf00      	nop
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	40011400 	.word	0x40011400
 8000eb8:	20000248 	.word	0x20000248
 8000ebc:	2000011c 	.word	0x2000011c
 8000ec0:	200000d4 	.word	0x200000d4

08000ec4 <WiFi_Init>:


void WiFi_Init()
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
 HAL_GPIO_WritePin(GPIOB, Enable_esp_Pin, GPIO_PIN_SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2140      	movs	r1, #64	; 0x40
 8000ecc:	480c      	ldr	r0, [pc, #48]	; (8000f00 <WiFi_Init+0x3c>)
 8000ece:	f000 fd31 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ed2:	2064      	movs	r0, #100	; 0x64
 8000ed4:	f000 f9e2 	bl	800129c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, Reset_esp_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2101      	movs	r1, #1
 8000edc:	4808      	ldr	r0, [pc, #32]	; (8000f00 <WiFi_Init+0x3c>)
 8000ede:	f000 fd29 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000ee2:	2064      	movs	r0, #100	; 0x64
 8000ee4:	f000 f9da 	bl	800129c <HAL_Delay>
  HAL_GPIO_WritePin(GPIOB, Reset_esp_Pin, GPIO_PIN_SET);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	2101      	movs	r1, #1
 8000eec:	4804      	ldr	r0, [pc, #16]	; (8000f00 <WiFi_Init+0x3c>)
 8000eee:	f000 fd21 	bl	8001934 <HAL_GPIO_WritePin>
  HAL_Delay(1500);
 8000ef2:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ef6:	f000 f9d1 	bl	800129c <HAL_Delay>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40020400 	.word	0x40020400

08000f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f08:	b672      	cpsid	i
}
 8000f0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <Error_Handler+0x8>
	...

08000f10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b10      	ldr	r3, [pc, #64]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1e:	4a0f      	ldr	r2, [pc, #60]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f24:	6453      	str	r3, [r2, #68]	; 0x44
 8000f26:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	603b      	str	r3, [r7, #0]
 8000f36:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_MspInit+0x4c>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	603b      	str	r3, [r7, #0]
 8000f4c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000f4e:	2007      	movs	r0, #7
 8000f50:	f000 fa98 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f54:	bf00      	nop
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40023800 	.word	0x40023800

08000f60 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	; 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f68:	f107 031c 	add.w	r3, r7, #28
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a36      	ldr	r2, [pc, #216]	; (8001058 <HAL_UART_MspInit+0xf8>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d12c      	bne.n	8000fdc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	61bb      	str	r3, [r7, #24]
 8000f86:	4b35      	ldr	r3, [pc, #212]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8a:	4a34      	ldr	r2, [pc, #208]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6413      	str	r3, [r2, #64]	; 0x40
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	61bb      	str	r3, [r7, #24]
 8000f9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	4b2e      	ldr	r3, [pc, #184]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a2d      	ldr	r2, [pc, #180]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b2b      	ldr	r3, [pc, #172]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000fba:	230c      	movs	r3, #12
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbe:	2302      	movs	r3, #2
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fca:	2307      	movs	r3, #7
 8000fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fce:	f107 031c 	add.w	r3, r7, #28
 8000fd2:	4619      	mov	r1, r3
 8000fd4:	4822      	ldr	r0, [pc, #136]	; (8001060 <HAL_UART_MspInit+0x100>)
 8000fd6:	f000 fb29 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8000fda:	e038      	b.n	800104e <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART6)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a20      	ldr	r2, [pc, #128]	; (8001064 <HAL_UART_MspInit+0x104>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d133      	bne.n	800104e <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART6_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	4b1c      	ldr	r3, [pc, #112]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fee:	4a1b      	ldr	r2, [pc, #108]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000ff0:	f043 0320 	orr.w	r3, r3, #32
 8000ff4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ff6:	4b19      	ldr	r3, [pc, #100]	; (800105c <HAL_UART_MspInit+0xfc>)
 8000ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffa:	f003 0320 	and.w	r3, r3, #32
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100a:	4a14      	ldr	r2, [pc, #80]	; (800105c <HAL_UART_MspInit+0xfc>)
 800100c:	f043 0304 	orr.w	r3, r3, #4
 8001010:	6313      	str	r3, [r2, #48]	; 0x30
 8001012:	4b12      	ldr	r3, [pc, #72]	; (800105c <HAL_UART_MspInit+0xfc>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	f003 0304 	and.w	r3, r3, #4
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800101e:	23c0      	movs	r3, #192	; 0xc0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001026:	2300      	movs	r3, #0
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2303      	movs	r3, #3
 800102c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800102e:	2308      	movs	r3, #8
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001032:	f107 031c 	add.w	r3, r7, #28
 8001036:	4619      	mov	r1, r3
 8001038:	480b      	ldr	r0, [pc, #44]	; (8001068 <HAL_UART_MspInit+0x108>)
 800103a:	f000 faf7 	bl	800162c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 800103e:	2200      	movs	r2, #0
 8001040:	2100      	movs	r1, #0
 8001042:	2047      	movs	r0, #71	; 0x47
 8001044:	f000 fa29 	bl	800149a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8001048:	2047      	movs	r0, #71	; 0x47
 800104a:	f000 fa42 	bl	80014d2 <HAL_NVIC_EnableIRQ>
}
 800104e:	bf00      	nop
 8001050:	3730      	adds	r7, #48	; 0x30
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40004400 	.word	0x40004400
 800105c:	40023800 	.word	0x40023800
 8001060:	40020000 	.word	0x40020000
 8001064:	40011400 	.word	0x40011400
 8001068:	40020800 	.word	0x40020800

0800106c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001070:	e7fe      	b.n	8001070 <NMI_Handler+0x4>

08001072 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <HardFault_Handler+0x4>

08001078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <MemManage_Handler+0x4>

0800107e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001082:	e7fe      	b.n	8001082 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	e7fe      	b.n	8001088 <UsageFault_Handler+0x4>

0800108a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108a:	b480      	push	{r7}
 800108c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr

08001098 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a6:	b480      	push	{r7}
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010b8:	f000 f8d0 	bl	800125c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	bd80      	pop	{r7, pc}

080010c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80010c4:	4802      	ldr	r0, [pc, #8]	; (80010d0 <USART6_IRQHandler+0x10>)
 80010c6:	f001 f9e7 	bl	8002498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	200000d4 	.word	0x200000d4

080010d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b086      	sub	sp, #24
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010dc:	4a14      	ldr	r2, [pc, #80]	; (8001130 <_sbrk+0x5c>)
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <_sbrk+0x60>)
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e8:	4b13      	ldr	r3, [pc, #76]	; (8001138 <_sbrk+0x64>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d102      	bne.n	80010f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <_sbrk+0x64>)
 80010f2:	4a12      	ldr	r2, [pc, #72]	; (800113c <_sbrk+0x68>)
 80010f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <_sbrk+0x64>)
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4413      	add	r3, r2
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	429a      	cmp	r2, r3
 8001102:	d207      	bcs.n	8001114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001104:	f002 f95c 	bl	80033c0 <__errno>
 8001108:	4603      	mov	r3, r0
 800110a:	220c      	movs	r2, #12
 800110c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110e:	f04f 33ff 	mov.w	r3, #4294967295
 8001112:	e009      	b.n	8001128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <_sbrk+0x64>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800111a:	4b07      	ldr	r3, [pc, #28]	; (8001138 <_sbrk+0x64>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4413      	add	r3, r2
 8001122:	4a05      	ldr	r2, [pc, #20]	; (8001138 <_sbrk+0x64>)
 8001124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001126:	68fb      	ldr	r3, [r7, #12]
}
 8001128:	4618      	mov	r0, r3
 800112a:	3718      	adds	r7, #24
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20018000 	.word	0x20018000
 8001134:	00000400 	.word	0x00000400
 8001138:	200002d4 	.word	0x200002d4
 800113c:	20000428 	.word	0x20000428

08001140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <SystemInit+0x20>)
 8001146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800114a:	4a05      	ldr	r2, [pc, #20]	; (8001160 <SystemInit+0x20>)
 800114c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001150:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	e000ed00 	.word	0xe000ed00

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001168:	f7ff ffea 	bl	8001140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001192:	f002 f91b 	bl	80033cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff f9f9 	bl	800058c <main>
  bx  lr    
 800119a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800119c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011a4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80011a8:	08003ee0 	.word	0x08003ee0
  ldr r2, =_sbss
 80011ac:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80011b0:	20000424 	.word	0x20000424

080011b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011bc:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_Init+0x40>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_Init+0x40>)
 80011c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011c8:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_Init+0x40>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a0a      	ldr	r2, [pc, #40]	; (80011f8 <HAL_Init+0x40>)
 80011ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011d4:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_Init+0x40>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_Init+0x40>)
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011e0:	2003      	movs	r0, #3
 80011e2:	f000 f94f 	bl	8001484 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011e6:	2000      	movs	r0, #0
 80011e8:	f000 f808 	bl	80011fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011ec:	f7ff fe90 	bl	8000f10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023c00 	.word	0x40023c00

080011fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001204:	4b12      	ldr	r3, [pc, #72]	; (8001250 <HAL_InitTick+0x54>)
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_InitTick+0x58>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	4619      	mov	r1, r3
 800120e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001212:	fbb3 f3f1 	udiv	r3, r3, r1
 8001216:	fbb2 f3f3 	udiv	r3, r2, r3
 800121a:	4618      	mov	r0, r3
 800121c:	f000 f967 	bl	80014ee <HAL_SYSTICK_Config>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001226:	2301      	movs	r3, #1
 8001228:	e00e      	b.n	8001248 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	2b0f      	cmp	r3, #15
 800122e:	d80a      	bhi.n	8001246 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001230:	2200      	movs	r2, #0
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	f04f 30ff 	mov.w	r0, #4294967295
 8001238:	f000 f92f 	bl	800149a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800123c:	4a06      	ldr	r2, [pc, #24]	; (8001258 <HAL_InitTick+0x5c>)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001242:	2300      	movs	r3, #0
 8001244:	e000      	b.n	8001248 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
}
 8001248:	4618      	mov	r0, r3
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	20000014 	.word	0x20000014
 8001254:	2000001c 	.word	0x2000001c
 8001258:	20000018 	.word	0x20000018

0800125c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001260:	4b06      	ldr	r3, [pc, #24]	; (800127c <HAL_IncTick+0x20>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	461a      	mov	r2, r3
 8001266:	4b06      	ldr	r3, [pc, #24]	; (8001280 <HAL_IncTick+0x24>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4413      	add	r3, r2
 800126c:	4a04      	ldr	r2, [pc, #16]	; (8001280 <HAL_IncTick+0x24>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	2000001c 	.word	0x2000001c
 8001280:	200002d8 	.word	0x200002d8

08001284 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return uwTick;
 8001288:	4b03      	ldr	r3, [pc, #12]	; (8001298 <HAL_GetTick+0x14>)
 800128a:	681b      	ldr	r3, [r3, #0]
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	200002d8 	.word	0x200002d8

0800129c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012a4:	f7ff ffee 	bl	8001284 <HAL_GetTick>
 80012a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012b4:	d005      	beq.n	80012c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012b6:	4b0a      	ldr	r3, [pc, #40]	; (80012e0 <HAL_Delay+0x44>)
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	461a      	mov	r2, r3
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4413      	add	r3, r2
 80012c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012c2:	bf00      	nop
 80012c4:	f7ff ffde 	bl	8001284 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	68bb      	ldr	r3, [r7, #8]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	68fa      	ldr	r2, [r7, #12]
 80012d0:	429a      	cmp	r2, r3
 80012d2:	d8f7      	bhi.n	80012c4 <HAL_Delay+0x28>
  {
  }
}
 80012d4:	bf00      	nop
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000001c 	.word	0x2000001c

080012e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b085      	sub	sp, #20
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f003 0307 	and.w	r3, r3, #7
 80012f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012f4:	4b0c      	ldr	r3, [pc, #48]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012fa:	68ba      	ldr	r2, [r7, #8]
 80012fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001300:	4013      	ands	r3, r2
 8001302:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800130c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001310:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001314:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001316:	4a04      	ldr	r2, [pc, #16]	; (8001328 <__NVIC_SetPriorityGrouping+0x44>)
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	60d3      	str	r3, [r2, #12]
}
 800131c:	bf00      	nop
 800131e:	3714      	adds	r7, #20
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001330:	4b04      	ldr	r3, [pc, #16]	; (8001344 <__NVIC_GetPriorityGrouping+0x18>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	0a1b      	lsrs	r3, r3, #8
 8001336:	f003 0307 	and.w	r3, r3, #7
}
 800133a:	4618      	mov	r0, r3
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	2b00      	cmp	r3, #0
 8001358:	db0b      	blt.n	8001372 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800135a:	79fb      	ldrb	r3, [r7, #7]
 800135c:	f003 021f 	and.w	r2, r3, #31
 8001360:	4907      	ldr	r1, [pc, #28]	; (8001380 <__NVIC_EnableIRQ+0x38>)
 8001362:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001366:	095b      	lsrs	r3, r3, #5
 8001368:	2001      	movs	r0, #1
 800136a:	fa00 f202 	lsl.w	r2, r0, r2
 800136e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000e100 	.word	0xe000e100

08001384 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	6039      	str	r1, [r7, #0]
 800138e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001390:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	db0a      	blt.n	80013ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	490c      	ldr	r1, [pc, #48]	; (80013d0 <__NVIC_SetPriority+0x4c>)
 800139e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a2:	0112      	lsls	r2, r2, #4
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	440b      	add	r3, r1
 80013a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013ac:	e00a      	b.n	80013c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4908      	ldr	r1, [pc, #32]	; (80013d4 <__NVIC_SetPriority+0x50>)
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	f003 030f 	and.w	r3, r3, #15
 80013ba:	3b04      	subs	r3, #4
 80013bc:	0112      	lsls	r2, r2, #4
 80013be:	b2d2      	uxtb	r2, r2
 80013c0:	440b      	add	r3, r1
 80013c2:	761a      	strb	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000e100 	.word	0xe000e100
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	60f8      	str	r0, [r7, #12]
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	f1c3 0307 	rsb	r3, r3, #7
 80013f2:	2b04      	cmp	r3, #4
 80013f4:	bf28      	it	cs
 80013f6:	2304      	movcs	r3, #4
 80013f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	3304      	adds	r3, #4
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d902      	bls.n	8001408 <NVIC_EncodePriority+0x30>
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3b03      	subs	r3, #3
 8001406:	e000      	b.n	800140a <NVIC_EncodePriority+0x32>
 8001408:	2300      	movs	r3, #0
 800140a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800140c:	f04f 32ff 	mov.w	r2, #4294967295
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	43da      	mvns	r2, r3
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	401a      	ands	r2, r3
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001420:	f04f 31ff 	mov.w	r1, #4294967295
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	fa01 f303 	lsl.w	r3, r1, r3
 800142a:	43d9      	mvns	r1, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001430:	4313      	orrs	r3, r2
         );
}
 8001432:	4618      	mov	r0, r3
 8001434:	3724      	adds	r7, #36	; 0x24
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
	...

08001440 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3b01      	subs	r3, #1
 800144c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001450:	d301      	bcc.n	8001456 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001452:	2301      	movs	r3, #1
 8001454:	e00f      	b.n	8001476 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001456:	4a0a      	ldr	r2, [pc, #40]	; (8001480 <SysTick_Config+0x40>)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3b01      	subs	r3, #1
 800145c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800145e:	210f      	movs	r1, #15
 8001460:	f04f 30ff 	mov.w	r0, #4294967295
 8001464:	f7ff ff8e 	bl	8001384 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001468:	4b05      	ldr	r3, [pc, #20]	; (8001480 <SysTick_Config+0x40>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800146e:	4b04      	ldr	r3, [pc, #16]	; (8001480 <SysTick_Config+0x40>)
 8001470:	2207      	movs	r2, #7
 8001472:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	e000e010 	.word	0xe000e010

08001484 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f7ff ff29 	bl	80012e4 <__NVIC_SetPriorityGrouping>
}
 8001492:	bf00      	nop
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}

0800149a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800149a:	b580      	push	{r7, lr}
 800149c:	b086      	sub	sp, #24
 800149e:	af00      	add	r7, sp, #0
 80014a0:	4603      	mov	r3, r0
 80014a2:	60b9      	str	r1, [r7, #8]
 80014a4:	607a      	str	r2, [r7, #4]
 80014a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014ac:	f7ff ff3e 	bl	800132c <__NVIC_GetPriorityGrouping>
 80014b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	68b9      	ldr	r1, [r7, #8]
 80014b6:	6978      	ldr	r0, [r7, #20]
 80014b8:	f7ff ff8e 	bl	80013d8 <NVIC_EncodePriority>
 80014bc:	4602      	mov	r2, r0
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff5d 	bl	8001384 <__NVIC_SetPriority>
}
 80014ca:	bf00      	nop
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff ff31 	bl	8001348 <__NVIC_EnableIRQ>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b082      	sub	sp, #8
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff ffa2 	bl	8001440 <SysTick_Config>
 80014fc:	4603      	mov	r3, r0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3708      	adds	r7, #8
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}

08001506 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001506:	b580      	push	{r7, lr}
 8001508:	b084      	sub	sp, #16
 800150a:	af00      	add	r7, sp, #0
 800150c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001512:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001514:	f7ff feb6 	bl	8001284 <HAL_GetTick>
 8001518:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001520:	b2db      	uxtb	r3, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d008      	beq.n	8001538 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2200      	movs	r2, #0
 8001530:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001534:	2301      	movs	r3, #1
 8001536:	e052      	b.n	80015de <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f022 0216 	bic.w	r2, r2, #22
 8001546:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	695a      	ldr	r2, [r3, #20]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001556:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <HAL_DMA_Abort+0x62>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001564:	2b00      	cmp	r3, #0
 8001566:	d007      	beq.n	8001578 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0208 	bic.w	r2, r2, #8
 8001576:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f022 0201 	bic.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001588:	e013      	b.n	80015b2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800158a:	f7ff fe7b 	bl	8001284 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	1ad3      	subs	r3, r2, r3
 8001594:	2b05      	cmp	r3, #5
 8001596:	d90c      	bls.n	80015b2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2220      	movs	r2, #32
 800159c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2203      	movs	r2, #3
 80015a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2200      	movs	r2, #0
 80015aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80015ae:	2303      	movs	r3, #3
 80015b0:	e015      	b.n	80015de <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0301 	and.w	r3, r3, #1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1e4      	bne.n	800158a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015c4:	223f      	movs	r2, #63	; 0x3f
 80015c6:	409a      	lsls	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2201      	movs	r2, #1
 80015d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80015dc:	2300      	movs	r3, #0
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3710      	adds	r7, #16
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}

080015e6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015e6:	b480      	push	{r7}
 80015e8:	b083      	sub	sp, #12
 80015ea:	af00      	add	r7, sp, #0
 80015ec:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d004      	beq.n	8001604 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001600:	2301      	movs	r3, #1
 8001602:	e00c      	b.n	800161e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2205      	movs	r2, #5
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f022 0201 	bic.w	r2, r2, #1
 800161a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e159      	b.n	80018fc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 8148 	bne.w	80018f6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0201 	and.w	r2, r3, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d017      	beq.n	800171c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80a2 	beq.w	80018f6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b57      	ldr	r3, [pc, #348]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a56      	ldr	r2, [pc, #344]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b54      	ldr	r3, [pc, #336]	; (8001914 <HAL_GPIO_Init+0x2e8>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a52      	ldr	r2, [pc, #328]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a49      	ldr	r2, [pc, #292]	; (800191c <HAL_GPIO_Init+0x2f0>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d019      	beq.n	800182e <HAL_GPIO_Init+0x202>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a48      	ldr	r2, [pc, #288]	; (8001920 <HAL_GPIO_Init+0x2f4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_GPIO_Init+0x1fe>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a47      	ldr	r2, [pc, #284]	; (8001924 <HAL_GPIO_Init+0x2f8>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d00d      	beq.n	8001826 <HAL_GPIO_Init+0x1fa>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a46      	ldr	r2, [pc, #280]	; (8001928 <HAL_GPIO_Init+0x2fc>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d007      	beq.n	8001822 <HAL_GPIO_Init+0x1f6>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a45      	ldr	r2, [pc, #276]	; (800192c <HAL_GPIO_Init+0x300>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d101      	bne.n	800181e <HAL_GPIO_Init+0x1f2>
 800181a:	2304      	movs	r3, #4
 800181c:	e008      	b.n	8001830 <HAL_GPIO_Init+0x204>
 800181e:	2307      	movs	r3, #7
 8001820:	e006      	b.n	8001830 <HAL_GPIO_Init+0x204>
 8001822:	2303      	movs	r3, #3
 8001824:	e004      	b.n	8001830 <HAL_GPIO_Init+0x204>
 8001826:	2302      	movs	r3, #2
 8001828:	e002      	b.n	8001830 <HAL_GPIO_Init+0x204>
 800182a:	2301      	movs	r3, #1
 800182c:	e000      	b.n	8001830 <HAL_GPIO_Init+0x204>
 800182e:	2300      	movs	r3, #0
 8001830:	69fa      	ldr	r2, [r7, #28]
 8001832:	f002 0203 	and.w	r2, r2, #3
 8001836:	0092      	lsls	r2, r2, #2
 8001838:	4093      	lsls	r3, r2
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	4935      	ldr	r1, [pc, #212]	; (8001918 <HAL_GPIO_Init+0x2ec>)
 8001842:	69fb      	ldr	r3, [r7, #28]
 8001844:	089b      	lsrs	r3, r3, #2
 8001846:	3302      	adds	r3, #2
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800184e:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	43db      	mvns	r3, r3
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	4013      	ands	r3, r2
 800185c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d003      	beq.n	8001872 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800186a:	69ba      	ldr	r2, [r7, #24]
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001872:	4a2f      	ldr	r2, [pc, #188]	; (8001930 <HAL_GPIO_Init+0x304>)
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001878:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_GPIO_Init+0x304>)
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800189c:	4a24      	ldr	r2, [pc, #144]	; (8001930 <HAL_GPIO_Init+0x304>)
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018a2:	4b23      	ldr	r3, [pc, #140]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	43db      	mvns	r3, r3
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4013      	ands	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d003      	beq.n	80018c6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018be:	69ba      	ldr	r2, [r7, #24]
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	4313      	orrs	r3, r2
 80018c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018c6:	4a1a      	ldr	r2, [pc, #104]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018cc:	4b18      	ldr	r3, [pc, #96]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	43db      	mvns	r3, r3
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	4013      	ands	r3, r2
 80018da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d003      	beq.n	80018f0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80018f0:	4a0f      	ldr	r2, [pc, #60]	; (8001930 <HAL_GPIO_Init+0x304>)
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	69fb      	ldr	r3, [r7, #28]
 80018fe:	2b0f      	cmp	r3, #15
 8001900:	f67f aea2 	bls.w	8001648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	3724      	adds	r7, #36	; 0x24
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40023800 	.word	0x40023800
 8001918:	40013800 	.word	0x40013800
 800191c:	40020000 	.word	0x40020000
 8001920:	40020400 	.word	0x40020400
 8001924:	40020800 	.word	0x40020800
 8001928:	40020c00 	.word	0x40020c00
 800192c:	40021000 	.word	0x40021000
 8001930:	40013c00 	.word	0x40013c00

08001934 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001934:	b480      	push	{r7}
 8001936:	b083      	sub	sp, #12
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
 800193c:	460b      	mov	r3, r1
 800193e:	807b      	strh	r3, [r7, #2]
 8001940:	4613      	mov	r3, r2
 8001942:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001944:	787b      	ldrb	r3, [r7, #1]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800194a:	887a      	ldrh	r2, [r7, #2]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001950:	e003      	b.n	800195a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001952:	887b      	ldrh	r3, [r7, #2]
 8001954:	041a      	lsls	r2, r3, #16
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	619a      	str	r2, [r3, #24]
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
	...

08001968 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e267      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b00      	cmp	r3, #0
 8001984:	d075      	beq.n	8001a72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001986:	4b88      	ldr	r3, [pc, #544]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 030c 	and.w	r3, r3, #12
 800198e:	2b04      	cmp	r3, #4
 8001990:	d00c      	beq.n	80019ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001992:	4b85      	ldr	r3, [pc, #532]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800199a:	2b08      	cmp	r3, #8
 800199c:	d112      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800199e:	4b82      	ldr	r3, [pc, #520]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80019aa:	d10b      	bne.n	80019c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b7e      	ldr	r3, [pc, #504]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05b      	beq.n	8001a70 <HAL_RCC_OscConfig+0x108>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d157      	bne.n	8001a70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e242      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019cc:	d106      	bne.n	80019dc <HAL_RCC_OscConfig+0x74>
 80019ce:	4b76      	ldr	r3, [pc, #472]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a75      	ldr	r2, [pc, #468]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x98>
 80019e6:	4b70      	ldr	r3, [pc, #448]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a6f      	ldr	r2, [pc, #444]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b6d      	ldr	r3, [pc, #436]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a6c      	ldr	r2, [pc, #432]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xb0>
 8001a00:	4b69      	ldr	r3, [pc, #420]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a68      	ldr	r2, [pc, #416]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b66      	ldr	r3, [pc, #408]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a65      	ldr	r2, [pc, #404]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fc30 	bl	8001284 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fc2c 	bl	8001284 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e207      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b5b      	ldr	r3, [pc, #364]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xc0>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a48:	f7ff fc1c 	bl	8001284 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fc18 	bl	8001284 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e1f3      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b51      	ldr	r3, [pc, #324]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0xe8>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d063      	beq.n	8001b46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b47      	ldr	r3, [pc, #284]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a96:	4b44      	ldr	r3, [pc, #272]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b41      	ldr	r3, [pc, #260]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1c7      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b3b      	ldr	r3, [pc, #236]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	4937      	ldr	r1, [pc, #220]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e03a      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d020      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b34      	ldr	r3, [pc, #208]	; (8001bac <HAL_RCC_OscConfig+0x244>)
 8001ada:	2201      	movs	r2, #1
 8001adc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ade:	f7ff fbd1 	bl	8001284 <HAL_GetTick>
 8001ae2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ae4:	e008      	b.n	8001af8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ae6:	f7ff fbcd 	bl	8001284 <HAL_GetTick>
 8001aea:	4602      	mov	r2, r0
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	1ad3      	subs	r3, r2, r3
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	d901      	bls.n	8001af8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e1a8      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001af8:	4b2b      	ldr	r3, [pc, #172]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d0f0      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	00db      	lsls	r3, r3, #3
 8001b12:	4925      	ldr	r1, [pc, #148]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	600b      	str	r3, [r1, #0]
 8001b18:	e015      	b.n	8001b46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b1a:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x244>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b20:	f7ff fbb0 	bl	8001284 <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b28:	f7ff fbac 	bl	8001284 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d901      	bls.n	8001b3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001b36:	2303      	movs	r3, #3
 8001b38:	e187      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b3a:	4b1b      	ldr	r3, [pc, #108]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d1f0      	bne.n	8001b28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d036      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d016      	beq.n	8001b88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x248>)
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b60:	f7ff fb90 	bl	8001284 <HAL_GetTick>
 8001b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b66:	e008      	b.n	8001b7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b68:	f7ff fb8c 	bl	8001284 <HAL_GetTick>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	1ad3      	subs	r3, r2, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d901      	bls.n	8001b7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b76:	2303      	movs	r3, #3
 8001b78:	e167      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b7a:	4b0b      	ldr	r3, [pc, #44]	; (8001ba8 <HAL_RCC_OscConfig+0x240>)
 8001b7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d0f0      	beq.n	8001b68 <HAL_RCC_OscConfig+0x200>
 8001b86:	e01b      	b.n	8001bc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <HAL_RCC_OscConfig+0x248>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b8e:	f7ff fb79 	bl	8001284 <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b94:	e00e      	b.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001b96:	f7ff fb75 	bl	8001284 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d907      	bls.n	8001bb4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e150      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	42470000 	.word	0x42470000
 8001bb0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bb4:	4b88      	ldr	r3, [pc, #544]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1ea      	bne.n	8001b96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f003 0304 	and.w	r3, r3, #4
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	f000 8097 	beq.w	8001cfc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bd2:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d10f      	bne.n	8001bfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b7d      	ldr	r3, [pc, #500]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be6:	4a7c      	ldr	r2, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001be8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bec:	6413      	str	r3, [r2, #64]	; 0x40
 8001bee:	4b7a      	ldr	r3, [pc, #488]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bfe:	4b77      	ldr	r3, [pc, #476]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d118      	bne.n	8001c3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c0a:	4b74      	ldr	r3, [pc, #464]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a73      	ldr	r2, [pc, #460]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c16:	f7ff fb35 	bl	8001284 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff fb31 	bl	8001284 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e10c      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c30:	4b6a      	ldr	r3, [pc, #424]	; (8001ddc <HAL_RCC_OscConfig+0x474>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d106      	bne.n	8001c52 <HAL_RCC_OscConfig+0x2ea>
 8001c44:	4b64      	ldr	r3, [pc, #400]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c48:	4a63      	ldr	r2, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c4a:	f043 0301 	orr.w	r3, r3, #1
 8001c4e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c50:	e01c      	b.n	8001c8c <HAL_RCC_OscConfig+0x324>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b05      	cmp	r3, #5
 8001c58:	d10c      	bne.n	8001c74 <HAL_RCC_OscConfig+0x30c>
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a5e      	ldr	r2, [pc, #376]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c60:	f043 0304 	orr.w	r3, r3, #4
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
 8001c66:	4b5c      	ldr	r3, [pc, #368]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a5b      	ldr	r2, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70
 8001c72:	e00b      	b.n	8001c8c <HAL_RCC_OscConfig+0x324>
 8001c74:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c78:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c7a:	f023 0301 	bic.w	r3, r3, #1
 8001c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c80:	4b55      	ldr	r3, [pc, #340]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c84:	4a54      	ldr	r2, [pc, #336]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 0304 	bic.w	r3, r3, #4
 8001c8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d015      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c94:	f7ff faf6 	bl	8001284 <HAL_GetTick>
 8001c98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c9a:	e00a      	b.n	8001cb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c9c:	f7ff faf2 	bl	8001284 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d901      	bls.n	8001cb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e0cb      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cb2:	4b49      	ldr	r3, [pc, #292]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cb6:	f003 0302 	and.w	r3, r3, #2
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d0ee      	beq.n	8001c9c <HAL_RCC_OscConfig+0x334>
 8001cbe:	e014      	b.n	8001cea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc0:	f7ff fae0 	bl	8001284 <HAL_GetTick>
 8001cc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc6:	e00a      	b.n	8001cde <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc8:	f7ff fadc 	bl	8001284 <HAL_GetTick>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e0b5      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cde:	4b3e      	ldr	r3, [pc, #248]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce2:	f003 0302 	and.w	r3, r3, #2
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d1ee      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cea:	7dfb      	ldrb	r3, [r7, #23]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d105      	bne.n	8001cfc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cf0:	4b39      	ldr	r3, [pc, #228]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf4:	4a38      	ldr	r2, [pc, #224]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cfa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	699b      	ldr	r3, [r3, #24]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f000 80a1 	beq.w	8001e48 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d05c      	beq.n	8001dcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d141      	bne.n	8001d9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d1a:	4b31      	ldr	r3, [pc, #196]	; (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d20:	f7ff fab0 	bl	8001284 <HAL_GetTick>
 8001d24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d26:	e008      	b.n	8001d3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d28:	f7ff faac 	bl	8001284 <HAL_GetTick>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	1ad3      	subs	r3, r2, r3
 8001d32:	2b02      	cmp	r3, #2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e087      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	4b27      	ldr	r3, [pc, #156]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d1f0      	bne.n	8001d28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69da      	ldr	r2, [r3, #28]
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6a1b      	ldr	r3, [r3, #32]
 8001d4e:	431a      	orrs	r2, r3
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	019b      	lsls	r3, r3, #6
 8001d56:	431a      	orrs	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d5c:	085b      	lsrs	r3, r3, #1
 8001d5e:	3b01      	subs	r3, #1
 8001d60:	041b      	lsls	r3, r3, #16
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	061b      	lsls	r3, r3, #24
 8001d6a:	491b      	ldr	r1, [pc, #108]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d70:	4b1b      	ldr	r3, [pc, #108]	; (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001d72:	2201      	movs	r2, #1
 8001d74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d76:	f7ff fa85 	bl	8001284 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff fa81 	bl	8001284 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e05c      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d90:	4b11      	ldr	r3, [pc, #68]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d0f0      	beq.n	8001d7e <HAL_RCC_OscConfig+0x416>
 8001d9c:	e054      	b.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <HAL_RCC_OscConfig+0x478>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da4:	f7ff fa6e 	bl	8001284 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff fa6a 	bl	8001284 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e045      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x470>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f0      	bne.n	8001dac <HAL_RCC_OscConfig+0x444>
 8001dca:	e03d      	b.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	699b      	ldr	r3, [r3, #24]
 8001dd0:	2b01      	cmp	r3, #1
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e038      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
 8001dd8:	40023800 	.word	0x40023800
 8001ddc:	40007000 	.word	0x40007000
 8001de0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001de4:	4b1b      	ldr	r3, [pc, #108]	; (8001e54 <HAL_RCC_OscConfig+0x4ec>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	699b      	ldr	r3, [r3, #24]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d028      	beq.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d121      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d11a      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e0e:	68fa      	ldr	r2, [r7, #12]
 8001e10:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e14:	4013      	ands	r3, r2
 8001e16:	687a      	ldr	r2, [r7, #4]
 8001e18:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d111      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e2a:	085b      	lsrs	r3, r3, #1
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d107      	bne.n	8001e44 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e000      	b.n	8001e4a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023800 	.word	0x40023800

08001e58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cc      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b68      	ldr	r3, [pc, #416]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0307 	and.w	r3, r3, #7
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d90c      	bls.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b65      	ldr	r3, [pc, #404]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e82:	4b63      	ldr	r3, [pc, #396]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0307 	and.w	r3, r3, #7
 8001e8a:	683a      	ldr	r2, [r7, #0]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d001      	beq.n	8001e94 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e0b8      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d020      	beq.n	8001ee2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001eac:	4b59      	ldr	r3, [pc, #356]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a58      	ldr	r2, [pc, #352]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001eb6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0308 	and.w	r3, r3, #8
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d005      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ec4:	4b53      	ldr	r3, [pc, #332]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a52      	ldr	r2, [pc, #328]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ece:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ed0:	4b50      	ldr	r3, [pc, #320]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed2:	689b      	ldr	r3, [r3, #8]
 8001ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	494d      	ldr	r1, [pc, #308]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ede:	4313      	orrs	r3, r2
 8001ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0301 	and.w	r3, r3, #1
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d044      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d107      	bne.n	8001f06 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ef6:	4b47      	ldr	r3, [pc, #284]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d119      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e07f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d003      	beq.n	8001f16 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f12:	2b03      	cmp	r3, #3
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f16:	4b3f      	ldr	r3, [pc, #252]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e06f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f26:	4b3b      	ldr	r3, [pc, #236]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e067      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b37      	ldr	r3, [pc, #220]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4934      	ldr	r1, [pc, #208]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f48:	f7ff f99c 	bl	8001284 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f998 	bl	8001284 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e04f      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b2b      	ldr	r3, [pc, #172]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0307 	and.w	r3, r3, #7
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d20c      	bcs.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f88:	683a      	ldr	r2, [r7, #0]
 8001f8a:	b2d2      	uxtb	r2, r2
 8001f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_RCC_ClockConfig+0x1b8>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d001      	beq.n	8001fa0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e032      	b.n	8002006 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d008      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	4916      	ldr	r1, [pc, #88]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fba:	4313      	orrs	r3, r2
 8001fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d009      	beq.n	8001fde <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	490e      	ldr	r1, [pc, #56]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001fde:	f000 f821 	bl	8002024 <HAL_RCC_GetSysClockFreq>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 030f 	and.w	r3, r3, #15
 8001fee:	490a      	ldr	r1, [pc, #40]	; (8002018 <HAL_RCC_ClockConfig+0x1c0>)
 8001ff0:	5ccb      	ldrb	r3, [r1, r3]
 8001ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff6:	4a09      	ldr	r2, [pc, #36]	; (800201c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1c8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7ff f8fc 	bl	80011fc <HAL_InitTick>

  return HAL_OK;
 8002004:	2300      	movs	r3, #0
}
 8002006:	4618      	mov	r0, r3
 8002008:	3710      	adds	r7, #16
 800200a:	46bd      	mov	sp, r7
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	40023c00 	.word	0x40023c00
 8002014:	40023800 	.word	0x40023800
 8002018:	08003e84 	.word	0x08003e84
 800201c:	20000014 	.word	0x20000014
 8002020:	20000018 	.word	0x20000018

08002024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002028:	b094      	sub	sp, #80	; 0x50
 800202a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	647b      	str	r3, [r7, #68]	; 0x44
 8002030:	2300      	movs	r3, #0
 8002032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002034:	2300      	movs	r3, #0
 8002036:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800203c:	4b79      	ldr	r3, [pc, #484]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b08      	cmp	r3, #8
 8002046:	d00d      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0x40>
 8002048:	2b08      	cmp	r3, #8
 800204a:	f200 80e1 	bhi.w	8002210 <HAL_RCC_GetSysClockFreq+0x1ec>
 800204e:	2b00      	cmp	r3, #0
 8002050:	d002      	beq.n	8002058 <HAL_RCC_GetSysClockFreq+0x34>
 8002052:	2b04      	cmp	r3, #4
 8002054:	d003      	beq.n	800205e <HAL_RCC_GetSysClockFreq+0x3a>
 8002056:	e0db      	b.n	8002210 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002058:	4b73      	ldr	r3, [pc, #460]	; (8002228 <HAL_RCC_GetSysClockFreq+0x204>)
 800205a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800205c:	e0db      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800205e:	4b73      	ldr	r3, [pc, #460]	; (800222c <HAL_RCC_GetSysClockFreq+0x208>)
 8002060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002062:	e0d8      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002064:	4b6f      	ldr	r3, [pc, #444]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800206c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800206e:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d063      	beq.n	8002142 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207a:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	099b      	lsrs	r3, r3, #6
 8002080:	2200      	movs	r2, #0
 8002082:	63bb      	str	r3, [r7, #56]	; 0x38
 8002084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800208c:	633b      	str	r3, [r7, #48]	; 0x30
 800208e:	2300      	movs	r3, #0
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
 8002092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002096:	4622      	mov	r2, r4
 8002098:	462b      	mov	r3, r5
 800209a:	f04f 0000 	mov.w	r0, #0
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a8:	0150      	lsls	r0, r2, #5
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4621      	mov	r1, r4
 80020b0:	1a51      	subs	r1, r2, r1
 80020b2:	6139      	str	r1, [r7, #16]
 80020b4:	4629      	mov	r1, r5
 80020b6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ba:	617b      	str	r3, [r7, #20]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80020c8:	4659      	mov	r1, fp
 80020ca:	018b      	lsls	r3, r1, #6
 80020cc:	4651      	mov	r1, sl
 80020ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d2:	4651      	mov	r1, sl
 80020d4:	018a      	lsls	r2, r1, #6
 80020d6:	4651      	mov	r1, sl
 80020d8:	ebb2 0801 	subs.w	r8, r2, r1
 80020dc:	4659      	mov	r1, fp
 80020de:	eb63 0901 	sbc.w	r9, r3, r1
 80020e2:	f04f 0200 	mov.w	r2, #0
 80020e6:	f04f 0300 	mov.w	r3, #0
 80020ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020f6:	4690      	mov	r8, r2
 80020f8:	4699      	mov	r9, r3
 80020fa:	4623      	mov	r3, r4
 80020fc:	eb18 0303 	adds.w	r3, r8, r3
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	462b      	mov	r3, r5
 8002104:	eb49 0303 	adc.w	r3, r9, r3
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	f04f 0200 	mov.w	r2, #0
 800210e:	f04f 0300 	mov.w	r3, #0
 8002112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002116:	4629      	mov	r1, r5
 8002118:	024b      	lsls	r3, r1, #9
 800211a:	4621      	mov	r1, r4
 800211c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002120:	4621      	mov	r1, r4
 8002122:	024a      	lsls	r2, r1, #9
 8002124:	4610      	mov	r0, r2
 8002126:	4619      	mov	r1, r3
 8002128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800212a:	2200      	movs	r2, #0
 800212c:	62bb      	str	r3, [r7, #40]	; 0x28
 800212e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002134:	f7fe f8ac 	bl	8000290 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002140:	e058      	b.n	80021f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	099b      	lsrs	r3, r3, #6
 8002148:	2200      	movs	r2, #0
 800214a:	4618      	mov	r0, r3
 800214c:	4611      	mov	r1, r2
 800214e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002152:	623b      	str	r3, [r7, #32]
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24
 8002158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800215c:	4642      	mov	r2, r8
 800215e:	464b      	mov	r3, r9
 8002160:	f04f 0000 	mov.w	r0, #0
 8002164:	f04f 0100 	mov.w	r1, #0
 8002168:	0159      	lsls	r1, r3, #5
 800216a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800216e:	0150      	lsls	r0, r2, #5
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4641      	mov	r1, r8
 8002176:	ebb2 0a01 	subs.w	sl, r2, r1
 800217a:	4649      	mov	r1, r9
 800217c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002180:	f04f 0200 	mov.w	r2, #0
 8002184:	f04f 0300 	mov.w	r3, #0
 8002188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800218c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002194:	ebb2 040a 	subs.w	r4, r2, sl
 8002198:	eb63 050b 	sbc.w	r5, r3, fp
 800219c:	f04f 0200 	mov.w	r2, #0
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	00eb      	lsls	r3, r5, #3
 80021a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80021aa:	00e2      	lsls	r2, r4, #3
 80021ac:	4614      	mov	r4, r2
 80021ae:	461d      	mov	r5, r3
 80021b0:	4643      	mov	r3, r8
 80021b2:	18e3      	adds	r3, r4, r3
 80021b4:	603b      	str	r3, [r7, #0]
 80021b6:	464b      	mov	r3, r9
 80021b8:	eb45 0303 	adc.w	r3, r5, r3
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	f04f 0200 	mov.w	r2, #0
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80021ca:	4629      	mov	r1, r5
 80021cc:	028b      	lsls	r3, r1, #10
 80021ce:	4621      	mov	r1, r4
 80021d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021d4:	4621      	mov	r1, r4
 80021d6:	028a      	lsls	r2, r1, #10
 80021d8:	4610      	mov	r0, r2
 80021da:	4619      	mov	r1, r3
 80021dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021de:	2200      	movs	r2, #0
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	61fa      	str	r2, [r7, #28]
 80021e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021e8:	f7fe f852 	bl	8000290 <__aeabi_uldivmod>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4613      	mov	r3, r2
 80021f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_GetSysClockFreq+0x200>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	0c1b      	lsrs	r3, r3, #16
 80021fa:	f003 0303 	and.w	r3, r3, #3
 80021fe:	3301      	adds	r3, #1
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002208:	fbb2 f3f3 	udiv	r3, r2, r3
 800220c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800220e:	e002      	b.n	8002216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002210:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_RCC_GetSysClockFreq+0x204>)
 8002212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002218:	4618      	mov	r0, r3
 800221a:	3750      	adds	r7, #80	; 0x50
 800221c:	46bd      	mov	sp, r7
 800221e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002222:	bf00      	nop
 8002224:	40023800 	.word	0x40023800
 8002228:	00f42400 	.word	0x00f42400
 800222c:	007a1200 	.word	0x007a1200

08002230 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_RCC_GetHCLKFreq+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000014 	.word	0x20000014

08002248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800224c:	f7ff fff0 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002250:	4602      	mov	r2, r0
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	0a9b      	lsrs	r3, r3, #10
 8002258:	f003 0307 	and.w	r3, r3, #7
 800225c:	4903      	ldr	r1, [pc, #12]	; (800226c <HAL_RCC_GetPCLK1Freq+0x24>)
 800225e:	5ccb      	ldrb	r3, [r1, r3]
 8002260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002264:	4618      	mov	r0, r3
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40023800 	.word	0x40023800
 800226c:	08003e94 	.word	0x08003e94

08002270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002274:	f7ff ffdc 	bl	8002230 <HAL_RCC_GetHCLKFreq>
 8002278:	4602      	mov	r2, r0
 800227a:	4b05      	ldr	r3, [pc, #20]	; (8002290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	0b5b      	lsrs	r3, r3, #13
 8002280:	f003 0307 	and.w	r3, r3, #7
 8002284:	4903      	ldr	r1, [pc, #12]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002286:	5ccb      	ldrb	r3, [r1, r3]
 8002288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800228c:	4618      	mov	r0, r3
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	08003e94 	.word	0x08003e94

08002298 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e042      	b.n	8002330 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80022b0:	b2db      	uxtb	r3, r3
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d106      	bne.n	80022c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	2200      	movs	r2, #0
 80022ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022be:	6878      	ldr	r0, [r7, #4]
 80022c0:	f7fe fe4e 	bl	8000f60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2224      	movs	r2, #36	; 0x24
 80022c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	68da      	ldr	r2, [r3, #12]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80022da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80022dc:	6878      	ldr	r0, [r7, #4]
 80022de:	f000 fdbd 	bl	8002e5c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691a      	ldr	r2, [r3, #16]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80022f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695a      	ldr	r2, [r3, #20]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002300:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	68da      	ldr	r2, [r3, #12]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002310:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08a      	sub	sp, #40	; 0x28
 800233c:	af02      	add	r7, sp, #8
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	603b      	str	r3, [r7, #0]
 8002344:	4613      	mov	r3, r2
 8002346:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002348:	2300      	movs	r3, #0
 800234a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002352:	b2db      	uxtb	r3, r3
 8002354:	2b20      	cmp	r3, #32
 8002356:	d175      	bne.n	8002444 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d002      	beq.n	8002364 <HAL_UART_Transmit+0x2c>
 800235e:	88fb      	ldrh	r3, [r7, #6]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d101      	bne.n	8002368 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e06e      	b.n	8002446 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2221      	movs	r2, #33	; 0x21
 8002372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002376:	f7fe ff85 	bl	8001284 <HAL_GetTick>
 800237a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	88fa      	ldrh	r2, [r7, #6]
 8002380:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002390:	d108      	bne.n	80023a4 <HAL_UART_Transmit+0x6c>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d104      	bne.n	80023a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800239a:	2300      	movs	r3, #0
 800239c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	61bb      	str	r3, [r7, #24]
 80023a2:	e003      	b.n	80023ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80023a4:	68bb      	ldr	r3, [r7, #8]
 80023a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80023ac:	e02e      	b.n	800240c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	2200      	movs	r2, #0
 80023b6:	2180      	movs	r1, #128	; 0x80
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 fb1f 	bl	80029fc <UART_WaitOnFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	2220      	movs	r2, #32
 80023c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e03a      	b.n	8002446 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10b      	bne.n	80023ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	881b      	ldrh	r3, [r3, #0]
 80023da:	461a      	mov	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80023e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	3302      	adds	r3, #2
 80023ea:	61bb      	str	r3, [r7, #24]
 80023ec:	e007      	b.n	80023fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	781a      	ldrb	r2, [r3, #0]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002402:	b29b      	uxth	r3, r3
 8002404:	3b01      	subs	r3, #1
 8002406:	b29a      	uxth	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002410:	b29b      	uxth	r3, r3
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1cb      	bne.n	80023ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	9300      	str	r3, [sp, #0]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2200      	movs	r2, #0
 800241e:	2140      	movs	r1, #64	; 0x40
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 faeb 	bl	80029fc <UART_WaitOnFlagUntilTimeout>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	d005      	beq.n	8002438 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2220      	movs	r2, #32
 8002430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e006      	b.n	8002446 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2220      	movs	r2, #32
 800243c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8002440:	2300      	movs	r3, #0
 8002442:	e000      	b.n	8002446 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8002444:	2302      	movs	r3, #2
  }
}
 8002446:	4618      	mov	r0, r3
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}

0800244e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b084      	sub	sp, #16
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	60b9      	str	r1, [r7, #8]
 8002458:	4613      	mov	r3, r2
 800245a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002462:	b2db      	uxtb	r3, r3
 8002464:	2b20      	cmp	r3, #32
 8002466:	d112      	bne.n	800248e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d002      	beq.n	8002474 <HAL_UART_Receive_IT+0x26>
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e00b      	b.n	8002490 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	2200      	movs	r2, #0
 800247c:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800247e:	88fb      	ldrh	r3, [r7, #6]
 8002480:	461a      	mov	r2, r3
 8002482:	68b9      	ldr	r1, [r7, #8]
 8002484:	68f8      	ldr	r0, [r7, #12]
 8002486:	f000 fb12 	bl	8002aae <UART_Start_Receive_IT>
 800248a:	4603      	mov	r3, r0
 800248c:	e000      	b.n	8002490 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800248e:	2302      	movs	r3, #2
  }
}
 8002490:	4618      	mov	r0, r3
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b0ba      	sub	sp, #232	; 0xe8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80024be:	2300      	movs	r3, #0
 80024c0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80024c4:	2300      	movs	r3, #0
 80024c6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80024ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80024d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10f      	bne.n	80024fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80024de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80024e2:	f003 0320 	and.w	r3, r3, #32
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <HAL_UART_IRQHandler+0x66>
 80024ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f000 fbf2 	bl	8002ce0 <UART_Receive_IT>
      return;
 80024fc:	e25b      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80024fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002502:	2b00      	cmp	r3, #0
 8002504:	f000 80de 	beq.w	80026c4 <HAL_UART_IRQHandler+0x22c>
 8002508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b00      	cmp	r3, #0
 8002512:	d106      	bne.n	8002522 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002518:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800251c:	2b00      	cmp	r3, #0
 800251e:	f000 80d1 	beq.w	80026c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_UART_IRQHandler+0xae>
 800252e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800253e:	f043 0201 	orr.w	r2, r3, #1
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800254a:	f003 0304 	and.w	r3, r3, #4
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_UART_IRQHandler+0xd2>
 8002552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002556:	f003 0301 	and.w	r3, r3, #1
 800255a:	2b00      	cmp	r3, #0
 800255c:	d005      	beq.n	800256a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f043 0202 	orr.w	r2, r3, #2
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800256a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00b      	beq.n	800258e <HAL_UART_IRQHandler+0xf6>
 8002576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800257a:	f003 0301 	and.w	r3, r3, #1
 800257e:	2b00      	cmp	r3, #0
 8002580:	d005      	beq.n	800258e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	f043 0204 	orr.w	r2, r3, #4
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800258e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d011      	beq.n	80025be <HAL_UART_IRQHandler+0x126>
 800259a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d105      	bne.n	80025b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80025a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025aa:	f003 0301 	and.w	r3, r3, #1
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d005      	beq.n	80025be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f043 0208 	orr.w	r2, r3, #8
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 81f2 	beq.w	80029ac <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80025c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025cc:	f003 0320 	and.w	r3, r3, #32
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d008      	beq.n	80025e6 <HAL_UART_IRQHandler+0x14e>
 80025d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025d8:	f003 0320 	and.w	r3, r3, #32
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fb7d 	bl	8002ce0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695b      	ldr	r3, [r3, #20]
 80025ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025f0:	2b40      	cmp	r3, #64	; 0x40
 80025f2:	bf0c      	ite	eq
 80025f4:	2301      	moveq	r3, #1
 80025f6:	2300      	movne	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d103      	bne.n	8002612 <HAL_UART_IRQHandler+0x17a>
 800260a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800260e:	2b00      	cmp	r3, #0
 8002610:	d04f      	beq.n	80026b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa85 	bl	8002b22 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b40      	cmp	r3, #64	; 0x40
 8002624:	d141      	bne.n	80026aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	3314      	adds	r3, #20
 800262c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002634:	e853 3f00 	ldrex	r3, [r3]
 8002638:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800263c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002640:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	3314      	adds	r3, #20
 800264e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002652:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002656:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800265a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800265e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002662:	e841 2300 	strex	r3, r2, [r1]
 8002666:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800266a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1d9      	bne.n	8002626 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002676:	2b00      	cmp	r3, #0
 8002678:	d013      	beq.n	80026a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267e:	4a7e      	ldr	r2, [pc, #504]	; (8002878 <HAL_UART_IRQHandler+0x3e0>)
 8002680:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002686:	4618      	mov	r0, r3
 8002688:	f7fe ffad 	bl	80015e6 <HAL_DMA_Abort_IT>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d016      	beq.n	80026c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002696:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800269c:	4610      	mov	r0, r2
 800269e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a0:	e00e      	b.n	80026c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f994 	bl	80029d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026a8:	e00a      	b.n	80026c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f990 	bl	80029d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b0:	e006      	b.n	80026c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 f98c 	bl	80029d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80026be:	e175      	b.n	80029ac <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	bf00      	nop
    return;
 80026c2:	e173      	b.n	80029ac <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	f040 814f 	bne.w	800296c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80026ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 8148 	beq.w	800296c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80026dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026e0:	f003 0310 	and.w	r3, r3, #16
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	f000 8141 	beq.w	800296c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60bb      	str	r3, [r7, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	60bb      	str	r3, [r7, #8]
 80026fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	f040 80b6 	bne.w	800287c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800271c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002720:	2b00      	cmp	r3, #0
 8002722:	f000 8145 	beq.w	80029b0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800272a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800272e:	429a      	cmp	r2, r3
 8002730:	f080 813e 	bcs.w	80029b0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800273a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002746:	f000 8088 	beq.w	800285a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002758:	e853 3f00 	ldrex	r3, [r3]
 800275c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002760:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002764:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	330c      	adds	r3, #12
 8002772:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002776:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800277a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002782:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002786:	e841 2300 	strex	r3, r2, [r1]
 800278a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800278e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002792:	2b00      	cmp	r3, #0
 8002794:	d1d9      	bne.n	800274a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	3314      	adds	r3, #20
 800279c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800279e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027a0:	e853 3f00 	ldrex	r3, [r3]
 80027a4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80027a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027a8:	f023 0301 	bic.w	r3, r3, #1
 80027ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	3314      	adds	r3, #20
 80027b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80027ba:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80027be:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027c0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80027c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80027c6:	e841 2300 	strex	r3, r2, [r1]
 80027ca:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80027cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1e1      	bne.n	8002796 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	3314      	adds	r3, #20
 80027d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80027dc:	e853 3f00 	ldrex	r3, [r3]
 80027e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80027e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80027e4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80027e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	3314      	adds	r3, #20
 80027f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80027f6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80027f8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80027fc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80027fe:	e841 2300 	strex	r3, r2, [r1]
 8002802:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002804:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002806:	2b00      	cmp	r3, #0
 8002808:	d1e3      	bne.n	80027d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2220      	movs	r2, #32
 800280e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	330c      	adds	r3, #12
 800281e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002822:	e853 3f00 	ldrex	r3, [r3]
 8002826:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002828:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800282a:	f023 0310 	bic.w	r3, r3, #16
 800282e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	330c      	adds	r3, #12
 8002838:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800283c:	65ba      	str	r2, [r7, #88]	; 0x58
 800283e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002840:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002842:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002844:	e841 2300 	strex	r3, r2, [r1]
 8002848:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800284a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e3      	bne.n	8002818 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002854:	4618      	mov	r0, r3
 8002856:	f7fe fe56 	bl	8001506 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2202      	movs	r2, #2
 800285e:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002868:	b29b      	uxth	r3, r3
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	b29b      	uxth	r3, r3
 800286e:	4619      	mov	r1, r3
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8b7 	bl	80029e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002876:	e09b      	b.n	80029b0 <HAL_UART_IRQHandler+0x518>
 8002878:	08002be9 	.word	0x08002be9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002884:	b29b      	uxth	r3, r3
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002890:	b29b      	uxth	r3, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 808e 	beq.w	80029b4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002898:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 8089 	beq.w	80029b4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	330c      	adds	r3, #12
 80028a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028ac:	e853 3f00 	ldrex	r3, [r3]
 80028b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80028b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80028b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	330c      	adds	r3, #12
 80028c2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80028c6:	647a      	str	r2, [r7, #68]	; 0x44
 80028c8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80028cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028ce:	e841 2300 	strex	r3, r2, [r1]
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d1e3      	bne.n	80028a2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	3314      	adds	r3, #20
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e4:	e853 3f00 	ldrex	r3, [r3]
 80028e8:	623b      	str	r3, [r7, #32]
   return(result);
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	3314      	adds	r3, #20
 80028fa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80028fe:	633a      	str	r2, [r7, #48]	; 0x30
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002906:	e841 2300 	strex	r3, r2, [r1]
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800290c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1e3      	bne.n	80028da <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2220      	movs	r2, #32
 8002916:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	330c      	adds	r3, #12
 8002926:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002928:	693b      	ldr	r3, [r7, #16]
 800292a:	e853 3f00 	ldrex	r3, [r3]
 800292e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0310 	bic.w	r3, r3, #16
 8002936:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	330c      	adds	r3, #12
 8002940:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002944:	61fa      	str	r2, [r7, #28]
 8002946:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002948:	69b9      	ldr	r1, [r7, #24]
 800294a:	69fa      	ldr	r2, [r7, #28]
 800294c:	e841 2300 	strex	r3, r2, [r1]
 8002950:	617b      	str	r3, [r7, #20]
   return(result);
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e3      	bne.n	8002920 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2202      	movs	r2, #2
 800295c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800295e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002962:	4619      	mov	r1, r3
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	f000 f83d 	bl	80029e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800296a:	e023      	b.n	80029b4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800296c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002974:	2b00      	cmp	r3, #0
 8002976:	d009      	beq.n	800298c <HAL_UART_IRQHandler+0x4f4>
 8002978:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800297c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002980:	2b00      	cmp	r3, #0
 8002982:	d003      	beq.n	800298c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 f943 	bl	8002c10 <UART_Transmit_IT>
    return;
 800298a:	e014      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800298c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002990:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00e      	beq.n	80029b6 <HAL_UART_IRQHandler+0x51e>
 8002998:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800299c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d008      	beq.n	80029b6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f000 f983 	bl	8002cb0 <UART_EndTransmit_IT>
    return;
 80029aa:	e004      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
    return;
 80029ac:	bf00      	nop
 80029ae:	e002      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029b0:	bf00      	nop
 80029b2:	e000      	b.n	80029b6 <HAL_UART_IRQHandler+0x51e>
      return;
 80029b4:	bf00      	nop
  }
}
 80029b6:	37e8      	adds	r7, #232	; 0xe8
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80029c4:	bf00      	nop
 80029c6:	370c      	adds	r7, #12
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80029f0:	bf00      	nop
 80029f2:	370c      	adds	r7, #12
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0c:	e03b      	b.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0e:	6a3b      	ldr	r3, [r7, #32]
 8002a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a14:	d037      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7fe fc35 	bl	8001284 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	6a3a      	ldr	r2, [r7, #32]
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x30>
 8002a26:	6a3b      	ldr	r3, [r7, #32]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	e03a      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0304 	and.w	r3, r3, #4
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d023      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	2b80      	cmp	r3, #128	; 0x80
 8002a42:	d020      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b40      	cmp	r3, #64	; 0x40
 8002a48:	d01d      	beq.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d116      	bne.n	8002a86 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	617b      	str	r3, [r7, #20]
 8002a6c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 f857 	bl	8002b22 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2208      	movs	r2, #8
 8002a78:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e00f      	b.n	8002aa6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	4013      	ands	r3, r2
 8002a90:	68ba      	ldr	r2, [r7, #8]
 8002a92:	429a      	cmp	r2, r3
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d0b4      	beq.n	8002a0e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	68ba      	ldr	r2, [r7, #8]
 8002ac0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	88fa      	ldrh	r2, [r7, #6]
 8002ac6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	2222      	movs	r2, #34	; 0x22
 8002ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d007      	beq.n	8002af4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68da      	ldr	r2, [r3, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002af2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	695a      	ldr	r2, [r3, #20]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0201 	orr.w	r2, r2, #1
 8002b02:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	68da      	ldr	r2, [r3, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f042 0220 	orr.w	r2, r2, #32
 8002b12:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3714      	adds	r7, #20
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr

08002b22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002b22:	b480      	push	{r7}
 8002b24:	b095      	sub	sp, #84	; 0x54
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	330c      	adds	r3, #12
 8002b30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b34:	e853 3f00 	ldrex	r3, [r3]
 8002b38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002b40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	330c      	adds	r3, #12
 8002b48:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b4a:	643a      	str	r2, [r7, #64]	; 0x40
 8002b4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b52:	e841 2300 	strex	r3, r2, [r1]
 8002b56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e5      	bne.n	8002b2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3314      	adds	r3, #20
 8002b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	e853 3f00 	ldrex	r3, [r3]
 8002b6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	f023 0301 	bic.w	r3, r3, #1
 8002b74:	64bb      	str	r3, [r7, #72]	; 0x48
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	3314      	adds	r3, #20
 8002b7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002b7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e5      	bne.n	8002b5e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d119      	bne.n	8002bce <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	330c      	adds	r3, #12
 8002ba0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	60bb      	str	r3, [r7, #8]
   return(result);
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f023 0310 	bic.w	r3, r3, #16
 8002bb0:	647b      	str	r3, [r7, #68]	; 0x44
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	330c      	adds	r3, #12
 8002bb8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002bba:	61ba      	str	r2, [r7, #24]
 8002bbc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bbe:	6979      	ldr	r1, [r7, #20]
 8002bc0:	69ba      	ldr	r2, [r7, #24]
 8002bc2:	e841 2300 	strex	r3, r2, [r1]
 8002bc6:	613b      	str	r3, [r7, #16]
   return(result);
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1e5      	bne.n	8002b9a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002bdc:	bf00      	nop
 8002bde:	3754      	adds	r7, #84	; 0x54
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002c02:	68f8      	ldr	r0, [r7, #12]
 8002c04:	f7ff fee4 	bl	80029d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002c08:	bf00      	nop
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b21      	cmp	r3, #33	; 0x21
 8002c22:	d13e      	bne.n	8002ca2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c2c:	d114      	bne.n	8002c58 <UART_Transmit_IT+0x48>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d110      	bne.n	8002c58 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6a1b      	ldr	r3, [r3, #32]
 8002c3a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	881b      	ldrh	r3, [r3, #0]
 8002c40:	461a      	mov	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c4a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a1b      	ldr	r3, [r3, #32]
 8002c50:	1c9a      	adds	r2, r3, #2
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	621a      	str	r2, [r3, #32]
 8002c56:	e008      	b.n	8002c6a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6a1b      	ldr	r3, [r3, #32]
 8002c5c:	1c59      	adds	r1, r3, #1
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6211      	str	r1, [r2, #32]
 8002c62:	781a      	ldrb	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	3b01      	subs	r3, #1
 8002c72:	b29b      	uxth	r3, r3
 8002c74:	687a      	ldr	r2, [r7, #4]
 8002c76:	4619      	mov	r1, r3
 8002c78:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10f      	bne.n	8002c9e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c8c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	68da      	ldr	r2, [r3, #12]
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	e000      	b.n	8002ca4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ca2:	2302      	movs	r3, #2
  }
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	3714      	adds	r7, #20
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	68da      	ldr	r2, [r3, #12]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff fe73 	bl	80029bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002cd6:	2300      	movs	r3, #0
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3708      	adds	r7, #8
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b08c      	sub	sp, #48	; 0x30
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b22      	cmp	r3, #34	; 0x22
 8002cf2:	f040 80ae 	bne.w	8002e52 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cfe:	d117      	bne.n	8002d30 <UART_Receive_IT+0x50>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	691b      	ldr	r3, [r3, #16]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d113      	bne.n	8002d30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d10:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	b29b      	uxth	r3, r3
 8002d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d28:	1c9a      	adds	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002d2e:	e026      	b.n	8002d7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002d36:	2300      	movs	r3, #0
 8002d38:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d007      	beq.n	8002d54 <UART_Receive_IT+0x74>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d10a      	bne.n	8002d62 <UART_Receive_IT+0x82>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d106      	bne.n	8002d62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	b2da      	uxtb	r2, r3
 8002d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d5e:	701a      	strb	r2, [r3, #0]
 8002d60:	e008      	b.n	8002d74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d6e:	b2da      	uxtb	r2, r3
 8002d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d82:	b29b      	uxth	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d15d      	bne.n	8002e4e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68da      	ldr	r2, [r3, #12]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f022 0220 	bic.w	r2, r2, #32
 8002da0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68da      	ldr	r2, [r3, #12]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002db0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	695a      	ldr	r2, [r3, #20]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f022 0201 	bic.w	r2, r2, #1
 8002dc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d135      	bne.n	8002e44 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	330c      	adds	r3, #12
 8002de4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	e853 3f00 	ldrex	r3, [r3]
 8002dec:	613b      	str	r3, [r7, #16]
   return(result);
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f023 0310 	bic.w	r3, r3, #16
 8002df4:	627b      	str	r3, [r7, #36]	; 0x24
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	330c      	adds	r3, #12
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	623a      	str	r2, [r7, #32]
 8002e00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e02:	69f9      	ldr	r1, [r7, #28]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	e841 2300 	strex	r3, r2, [r1]
 8002e0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d1e5      	bne.n	8002dde <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d10a      	bne.n	8002e36 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002e20:	2300      	movs	r3, #0
 8002e22:	60fb      	str	r3, [r7, #12]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	60fb      	str	r3, [r7, #12]
 8002e34:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff fdd1 	bl	80029e4 <HAL_UARTEx_RxEventCallback>
 8002e42:	e002      	b.n	8002e4a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7fe f80f 	bl	8000e68 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	e002      	b.n	8002e54 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	e000      	b.n	8002e54 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002e52:	2302      	movs	r3, #2
  }
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3730      	adds	r7, #48	; 0x30
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}

08002e5c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b0c0      	sub	sp, #256	; 0x100
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002e74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e78:	68d9      	ldr	r1, [r3, #12]
 8002e7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	ea40 0301 	orr.w	r3, r0, r1
 8002e84:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002e86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e8a:	689a      	ldr	r2, [r3, #8]
 8002e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e90:	691b      	ldr	r3, [r3, #16]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002e98:	695b      	ldr	r3, [r3, #20]
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ea0:	69db      	ldr	r3, [r3, #28]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002eb4:	f021 010c 	bic.w	r1, r1, #12
 8002eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002ec2:	430b      	orrs	r3, r1
 8002ec4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695b      	ldr	r3, [r3, #20]
 8002ece:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ed6:	6999      	ldr	r1, [r3, #24]
 8002ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002edc:	681a      	ldr	r2, [r3, #0]
 8002ede:	ea40 0301 	orr.w	r3, r0, r1
 8002ee2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ee8:	681a      	ldr	r2, [r3, #0]
 8002eea:	4b8f      	ldr	r3, [pc, #572]	; (8003128 <UART_SetConfig+0x2cc>)
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d005      	beq.n	8002efc <UART_SetConfig+0xa0>
 8002ef0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	4b8d      	ldr	r3, [pc, #564]	; (800312c <UART_SetConfig+0x2d0>)
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d104      	bne.n	8002f06 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002efc:	f7ff f9b8 	bl	8002270 <HAL_RCC_GetPCLK2Freq>
 8002f00:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002f04:	e003      	b.n	8002f0e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002f06:	f7ff f99f 	bl	8002248 <HAL_RCC_GetPCLK1Freq>
 8002f0a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f18:	f040 810c 	bne.w	8003134 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002f1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f20:	2200      	movs	r2, #0
 8002f22:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002f26:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002f2a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002f2e:	4622      	mov	r2, r4
 8002f30:	462b      	mov	r3, r5
 8002f32:	1891      	adds	r1, r2, r2
 8002f34:	65b9      	str	r1, [r7, #88]	; 0x58
 8002f36:	415b      	adcs	r3, r3
 8002f38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f3a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002f3e:	4621      	mov	r1, r4
 8002f40:	eb12 0801 	adds.w	r8, r2, r1
 8002f44:	4629      	mov	r1, r5
 8002f46:	eb43 0901 	adc.w	r9, r3, r1
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	f04f 0300 	mov.w	r3, #0
 8002f52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f5e:	4690      	mov	r8, r2
 8002f60:	4699      	mov	r9, r3
 8002f62:	4623      	mov	r3, r4
 8002f64:	eb18 0303 	adds.w	r3, r8, r3
 8002f68:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002f6c:	462b      	mov	r3, r5
 8002f6e:	eb49 0303 	adc.w	r3, r9, r3
 8002f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002f82:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002f86:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	18db      	adds	r3, r3, r3
 8002f8e:	653b      	str	r3, [r7, #80]	; 0x50
 8002f90:	4613      	mov	r3, r2
 8002f92:	eb42 0303 	adc.w	r3, r2, r3
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
 8002f98:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002f9c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002fa0:	f7fd f976 	bl	8000290 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <UART_SetConfig+0x2d4>)
 8002faa:	fba3 2302 	umull	r2, r3, r3, r2
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	011c      	lsls	r4, r3, #4
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002fbc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002fc0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	1891      	adds	r1, r2, r2
 8002fca:	64b9      	str	r1, [r7, #72]	; 0x48
 8002fcc:	415b      	adcs	r3, r3
 8002fce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	eb12 0a01 	adds.w	sl, r2, r1
 8002fda:	4649      	mov	r1, r9
 8002fdc:	eb43 0b01 	adc.w	fp, r3, r1
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002fec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ff0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002ff4:	4692      	mov	sl, r2
 8002ff6:	469b      	mov	fp, r3
 8002ff8:	4643      	mov	r3, r8
 8002ffa:	eb1a 0303 	adds.w	r3, sl, r3
 8002ffe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003002:	464b      	mov	r3, r9
 8003004:	eb4b 0303 	adc.w	r3, fp, r3
 8003008:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800300c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003018:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800301c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003020:	460b      	mov	r3, r1
 8003022:	18db      	adds	r3, r3, r3
 8003024:	643b      	str	r3, [r7, #64]	; 0x40
 8003026:	4613      	mov	r3, r2
 8003028:	eb42 0303 	adc.w	r3, r2, r3
 800302c:	647b      	str	r3, [r7, #68]	; 0x44
 800302e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003032:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003036:	f7fd f92b 	bl	8000290 <__aeabi_uldivmod>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	4611      	mov	r1, r2
 8003040:	4b3b      	ldr	r3, [pc, #236]	; (8003130 <UART_SetConfig+0x2d4>)
 8003042:	fba3 2301 	umull	r2, r3, r3, r1
 8003046:	095b      	lsrs	r3, r3, #5
 8003048:	2264      	movs	r2, #100	; 0x64
 800304a:	fb02 f303 	mul.w	r3, r2, r3
 800304e:	1acb      	subs	r3, r1, r3
 8003050:	00db      	lsls	r3, r3, #3
 8003052:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003056:	4b36      	ldr	r3, [pc, #216]	; (8003130 <UART_SetConfig+0x2d4>)
 8003058:	fba3 2302 	umull	r2, r3, r3, r2
 800305c:	095b      	lsrs	r3, r3, #5
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003064:	441c      	add	r4, r3
 8003066:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306a:	2200      	movs	r2, #0
 800306c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003070:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003074:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003078:	4642      	mov	r2, r8
 800307a:	464b      	mov	r3, r9
 800307c:	1891      	adds	r1, r2, r2
 800307e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003080:	415b      	adcs	r3, r3
 8003082:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003084:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003088:	4641      	mov	r1, r8
 800308a:	1851      	adds	r1, r2, r1
 800308c:	6339      	str	r1, [r7, #48]	; 0x30
 800308e:	4649      	mov	r1, r9
 8003090:	414b      	adcs	r3, r1
 8003092:	637b      	str	r3, [r7, #52]	; 0x34
 8003094:	f04f 0200 	mov.w	r2, #0
 8003098:	f04f 0300 	mov.w	r3, #0
 800309c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80030a0:	4659      	mov	r1, fp
 80030a2:	00cb      	lsls	r3, r1, #3
 80030a4:	4651      	mov	r1, sl
 80030a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030aa:	4651      	mov	r1, sl
 80030ac:	00ca      	lsls	r2, r1, #3
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	4642      	mov	r2, r8
 80030b6:	189b      	adds	r3, r3, r2
 80030b8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80030bc:	464b      	mov	r3, r9
 80030be:	460a      	mov	r2, r1
 80030c0:	eb42 0303 	adc.w	r3, r2, r3
 80030c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80030c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80030d4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80030d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80030dc:	460b      	mov	r3, r1
 80030de:	18db      	adds	r3, r3, r3
 80030e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80030e2:	4613      	mov	r3, r2
 80030e4:	eb42 0303 	adc.w	r3, r2, r3
 80030e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80030f2:	f7fd f8cd 	bl	8000290 <__aeabi_uldivmod>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4b0d      	ldr	r3, [pc, #52]	; (8003130 <UART_SetConfig+0x2d4>)
 80030fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003100:	095b      	lsrs	r3, r3, #5
 8003102:	2164      	movs	r1, #100	; 0x64
 8003104:	fb01 f303 	mul.w	r3, r1, r3
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	3332      	adds	r3, #50	; 0x32
 800310e:	4a08      	ldr	r2, [pc, #32]	; (8003130 <UART_SetConfig+0x2d4>)
 8003110:	fba2 2303 	umull	r2, r3, r2, r3
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	f003 0207 	and.w	r2, r3, #7
 800311a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4422      	add	r2, r4
 8003122:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003124:	e106      	b.n	8003334 <UART_SetConfig+0x4d8>
 8003126:	bf00      	nop
 8003128:	40011000 	.word	0x40011000
 800312c:	40011400 	.word	0x40011400
 8003130:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003134:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003138:	2200      	movs	r2, #0
 800313a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800313e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003142:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003146:	4642      	mov	r2, r8
 8003148:	464b      	mov	r3, r9
 800314a:	1891      	adds	r1, r2, r2
 800314c:	6239      	str	r1, [r7, #32]
 800314e:	415b      	adcs	r3, r3
 8003150:	627b      	str	r3, [r7, #36]	; 0x24
 8003152:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003156:	4641      	mov	r1, r8
 8003158:	1854      	adds	r4, r2, r1
 800315a:	4649      	mov	r1, r9
 800315c:	eb43 0501 	adc.w	r5, r3, r1
 8003160:	f04f 0200 	mov.w	r2, #0
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	00eb      	lsls	r3, r5, #3
 800316a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800316e:	00e2      	lsls	r2, r4, #3
 8003170:	4614      	mov	r4, r2
 8003172:	461d      	mov	r5, r3
 8003174:	4643      	mov	r3, r8
 8003176:	18e3      	adds	r3, r4, r3
 8003178:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800317c:	464b      	mov	r3, r9
 800317e:	eb45 0303 	adc.w	r3, r5, r3
 8003182:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003192:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80031a2:	4629      	mov	r1, r5
 80031a4:	008b      	lsls	r3, r1, #2
 80031a6:	4621      	mov	r1, r4
 80031a8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80031ac:	4621      	mov	r1, r4
 80031ae:	008a      	lsls	r2, r1, #2
 80031b0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80031b4:	f7fd f86c 	bl	8000290 <__aeabi_uldivmod>
 80031b8:	4602      	mov	r2, r0
 80031ba:	460b      	mov	r3, r1
 80031bc:	4b60      	ldr	r3, [pc, #384]	; (8003340 <UART_SetConfig+0x4e4>)
 80031be:	fba3 2302 	umull	r2, r3, r3, r2
 80031c2:	095b      	lsrs	r3, r3, #5
 80031c4:	011c      	lsls	r4, r3, #4
 80031c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80031d0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80031d4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80031d8:	4642      	mov	r2, r8
 80031da:	464b      	mov	r3, r9
 80031dc:	1891      	adds	r1, r2, r2
 80031de:	61b9      	str	r1, [r7, #24]
 80031e0:	415b      	adcs	r3, r3
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031e8:	4641      	mov	r1, r8
 80031ea:	1851      	adds	r1, r2, r1
 80031ec:	6139      	str	r1, [r7, #16]
 80031ee:	4649      	mov	r1, r9
 80031f0:	414b      	adcs	r3, r1
 80031f2:	617b      	str	r3, [r7, #20]
 80031f4:	f04f 0200 	mov.w	r2, #0
 80031f8:	f04f 0300 	mov.w	r3, #0
 80031fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003200:	4659      	mov	r1, fp
 8003202:	00cb      	lsls	r3, r1, #3
 8003204:	4651      	mov	r1, sl
 8003206:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800320a:	4651      	mov	r1, sl
 800320c:	00ca      	lsls	r2, r1, #3
 800320e:	4610      	mov	r0, r2
 8003210:	4619      	mov	r1, r3
 8003212:	4603      	mov	r3, r0
 8003214:	4642      	mov	r2, r8
 8003216:	189b      	adds	r3, r3, r2
 8003218:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800321c:	464b      	mov	r3, r9
 800321e:	460a      	mov	r2, r1
 8003220:	eb42 0303 	adc.w	r3, r2, r3
 8003224:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	67bb      	str	r3, [r7, #120]	; 0x78
 8003232:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003234:	f04f 0200 	mov.w	r2, #0
 8003238:	f04f 0300 	mov.w	r3, #0
 800323c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003240:	4649      	mov	r1, r9
 8003242:	008b      	lsls	r3, r1, #2
 8003244:	4641      	mov	r1, r8
 8003246:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800324a:	4641      	mov	r1, r8
 800324c:	008a      	lsls	r2, r1, #2
 800324e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003252:	f7fd f81d 	bl	8000290 <__aeabi_uldivmod>
 8003256:	4602      	mov	r2, r0
 8003258:	460b      	mov	r3, r1
 800325a:	4611      	mov	r1, r2
 800325c:	4b38      	ldr	r3, [pc, #224]	; (8003340 <UART_SetConfig+0x4e4>)
 800325e:	fba3 2301 	umull	r2, r3, r3, r1
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2264      	movs	r2, #100	; 0x64
 8003266:	fb02 f303 	mul.w	r3, r2, r3
 800326a:	1acb      	subs	r3, r1, r3
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	3332      	adds	r3, #50	; 0x32
 8003270:	4a33      	ldr	r2, [pc, #204]	; (8003340 <UART_SetConfig+0x4e4>)
 8003272:	fba2 2303 	umull	r2, r3, r2, r3
 8003276:	095b      	lsrs	r3, r3, #5
 8003278:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800327c:	441c      	add	r4, r3
 800327e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003282:	2200      	movs	r2, #0
 8003284:	673b      	str	r3, [r7, #112]	; 0x70
 8003286:	677a      	str	r2, [r7, #116]	; 0x74
 8003288:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800328c:	4642      	mov	r2, r8
 800328e:	464b      	mov	r3, r9
 8003290:	1891      	adds	r1, r2, r2
 8003292:	60b9      	str	r1, [r7, #8]
 8003294:	415b      	adcs	r3, r3
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800329c:	4641      	mov	r1, r8
 800329e:	1851      	adds	r1, r2, r1
 80032a0:	6039      	str	r1, [r7, #0]
 80032a2:	4649      	mov	r1, r9
 80032a4:	414b      	adcs	r3, r1
 80032a6:	607b      	str	r3, [r7, #4]
 80032a8:	f04f 0200 	mov.w	r2, #0
 80032ac:	f04f 0300 	mov.w	r3, #0
 80032b0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80032b4:	4659      	mov	r1, fp
 80032b6:	00cb      	lsls	r3, r1, #3
 80032b8:	4651      	mov	r1, sl
 80032ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032be:	4651      	mov	r1, sl
 80032c0:	00ca      	lsls	r2, r1, #3
 80032c2:	4610      	mov	r0, r2
 80032c4:	4619      	mov	r1, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	4642      	mov	r2, r8
 80032ca:	189b      	adds	r3, r3, r2
 80032cc:	66bb      	str	r3, [r7, #104]	; 0x68
 80032ce:	464b      	mov	r3, r9
 80032d0:	460a      	mov	r2, r1
 80032d2:	eb42 0303 	adc.w	r3, r2, r3
 80032d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80032d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	663b      	str	r3, [r7, #96]	; 0x60
 80032e2:	667a      	str	r2, [r7, #100]	; 0x64
 80032e4:	f04f 0200 	mov.w	r2, #0
 80032e8:	f04f 0300 	mov.w	r3, #0
 80032ec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80032f0:	4649      	mov	r1, r9
 80032f2:	008b      	lsls	r3, r1, #2
 80032f4:	4641      	mov	r1, r8
 80032f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80032fa:	4641      	mov	r1, r8
 80032fc:	008a      	lsls	r2, r1, #2
 80032fe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003302:	f7fc ffc5 	bl	8000290 <__aeabi_uldivmod>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <UART_SetConfig+0x4e4>)
 800330c:	fba3 1302 	umull	r1, r3, r3, r2
 8003310:	095b      	lsrs	r3, r3, #5
 8003312:	2164      	movs	r1, #100	; 0x64
 8003314:	fb01 f303 	mul.w	r3, r1, r3
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	011b      	lsls	r3, r3, #4
 800331c:	3332      	adds	r3, #50	; 0x32
 800331e:	4a08      	ldr	r2, [pc, #32]	; (8003340 <UART_SetConfig+0x4e4>)
 8003320:	fba2 2303 	umull	r2, r3, r2, r3
 8003324:	095b      	lsrs	r3, r3, #5
 8003326:	f003 020f 	and.w	r2, r3, #15
 800332a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4422      	add	r2, r4
 8003332:	609a      	str	r2, [r3, #8]
}
 8003334:	bf00      	nop
 8003336:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800333a:	46bd      	mov	sp, r7
 800333c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003340:	51eb851f 	.word	0x51eb851f

08003344 <siprintf>:
 8003344:	b40e      	push	{r1, r2, r3}
 8003346:	b500      	push	{lr}
 8003348:	b09c      	sub	sp, #112	; 0x70
 800334a:	ab1d      	add	r3, sp, #116	; 0x74
 800334c:	9002      	str	r0, [sp, #8]
 800334e:	9006      	str	r0, [sp, #24]
 8003350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003354:	4809      	ldr	r0, [pc, #36]	; (800337c <siprintf+0x38>)
 8003356:	9107      	str	r1, [sp, #28]
 8003358:	9104      	str	r1, [sp, #16]
 800335a:	4909      	ldr	r1, [pc, #36]	; (8003380 <siprintf+0x3c>)
 800335c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003360:	9105      	str	r1, [sp, #20]
 8003362:	6800      	ldr	r0, [r0, #0]
 8003364:	9301      	str	r3, [sp, #4]
 8003366:	a902      	add	r1, sp, #8
 8003368:	f000 f9be 	bl	80036e8 <_svfiprintf_r>
 800336c:	9b02      	ldr	r3, [sp, #8]
 800336e:	2200      	movs	r2, #0
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	b01c      	add	sp, #112	; 0x70
 8003374:	f85d eb04 	ldr.w	lr, [sp], #4
 8003378:	b003      	add	sp, #12
 800337a:	4770      	bx	lr
 800337c:	2000006c 	.word	0x2000006c
 8003380:	ffff0208 	.word	0xffff0208

08003384 <memset>:
 8003384:	4402      	add	r2, r0
 8003386:	4603      	mov	r3, r0
 8003388:	4293      	cmp	r3, r2
 800338a:	d100      	bne.n	800338e <memset+0xa>
 800338c:	4770      	bx	lr
 800338e:	f803 1b01 	strb.w	r1, [r3], #1
 8003392:	e7f9      	b.n	8003388 <memset+0x4>

08003394 <strstr>:
 8003394:	780a      	ldrb	r2, [r1, #0]
 8003396:	b570      	push	{r4, r5, r6, lr}
 8003398:	b96a      	cbnz	r2, 80033b6 <strstr+0x22>
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	429a      	cmp	r2, r3
 800339e:	d109      	bne.n	80033b4 <strstr+0x20>
 80033a0:	460c      	mov	r4, r1
 80033a2:	4605      	mov	r5, r0
 80033a4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d0f6      	beq.n	800339a <strstr+0x6>
 80033ac:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80033b0:	429e      	cmp	r6, r3
 80033b2:	d0f7      	beq.n	80033a4 <strstr+0x10>
 80033b4:	3001      	adds	r0, #1
 80033b6:	7803      	ldrb	r3, [r0, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1ef      	bne.n	800339c <strstr+0x8>
 80033bc:	4618      	mov	r0, r3
 80033be:	e7ec      	b.n	800339a <strstr+0x6>

080033c0 <__errno>:
 80033c0:	4b01      	ldr	r3, [pc, #4]	; (80033c8 <__errno+0x8>)
 80033c2:	6818      	ldr	r0, [r3, #0]
 80033c4:	4770      	bx	lr
 80033c6:	bf00      	nop
 80033c8:	2000006c 	.word	0x2000006c

080033cc <__libc_init_array>:
 80033cc:	b570      	push	{r4, r5, r6, lr}
 80033ce:	4d0d      	ldr	r5, [pc, #52]	; (8003404 <__libc_init_array+0x38>)
 80033d0:	4c0d      	ldr	r4, [pc, #52]	; (8003408 <__libc_init_array+0x3c>)
 80033d2:	1b64      	subs	r4, r4, r5
 80033d4:	10a4      	asrs	r4, r4, #2
 80033d6:	2600      	movs	r6, #0
 80033d8:	42a6      	cmp	r6, r4
 80033da:	d109      	bne.n	80033f0 <__libc_init_array+0x24>
 80033dc:	4d0b      	ldr	r5, [pc, #44]	; (800340c <__libc_init_array+0x40>)
 80033de:	4c0c      	ldr	r4, [pc, #48]	; (8003410 <__libc_init_array+0x44>)
 80033e0:	f000 fc72 	bl	8003cc8 <_init>
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	2600      	movs	r6, #0
 80033ea:	42a6      	cmp	r6, r4
 80033ec:	d105      	bne.n	80033fa <__libc_init_array+0x2e>
 80033ee:	bd70      	pop	{r4, r5, r6, pc}
 80033f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80033f4:	4798      	blx	r3
 80033f6:	3601      	adds	r6, #1
 80033f8:	e7ee      	b.n	80033d8 <__libc_init_array+0xc>
 80033fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80033fe:	4798      	blx	r3
 8003400:	3601      	adds	r6, #1
 8003402:	e7f2      	b.n	80033ea <__libc_init_array+0x1e>
 8003404:	08003ed8 	.word	0x08003ed8
 8003408:	08003ed8 	.word	0x08003ed8
 800340c:	08003ed8 	.word	0x08003ed8
 8003410:	08003edc 	.word	0x08003edc

08003414 <__retarget_lock_acquire_recursive>:
 8003414:	4770      	bx	lr

08003416 <__retarget_lock_release_recursive>:
 8003416:	4770      	bx	lr

08003418 <strcpy>:
 8003418:	4603      	mov	r3, r0
 800341a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800341e:	f803 2b01 	strb.w	r2, [r3], #1
 8003422:	2a00      	cmp	r2, #0
 8003424:	d1f9      	bne.n	800341a <strcpy+0x2>
 8003426:	4770      	bx	lr

08003428 <memcpy>:
 8003428:	440a      	add	r2, r1
 800342a:	4291      	cmp	r1, r2
 800342c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003430:	d100      	bne.n	8003434 <memcpy+0xc>
 8003432:	4770      	bx	lr
 8003434:	b510      	push	{r4, lr}
 8003436:	f811 4b01 	ldrb.w	r4, [r1], #1
 800343a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800343e:	4291      	cmp	r1, r2
 8003440:	d1f9      	bne.n	8003436 <memcpy+0xe>
 8003442:	bd10      	pop	{r4, pc}

08003444 <_free_r>:
 8003444:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003446:	2900      	cmp	r1, #0
 8003448:	d044      	beq.n	80034d4 <_free_r+0x90>
 800344a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800344e:	9001      	str	r0, [sp, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	f1a1 0404 	sub.w	r4, r1, #4
 8003456:	bfb8      	it	lt
 8003458:	18e4      	addlt	r4, r4, r3
 800345a:	f000 f8df 	bl	800361c <__malloc_lock>
 800345e:	4a1e      	ldr	r2, [pc, #120]	; (80034d8 <_free_r+0x94>)
 8003460:	9801      	ldr	r0, [sp, #4]
 8003462:	6813      	ldr	r3, [r2, #0]
 8003464:	b933      	cbnz	r3, 8003474 <_free_r+0x30>
 8003466:	6063      	str	r3, [r4, #4]
 8003468:	6014      	str	r4, [r2, #0]
 800346a:	b003      	add	sp, #12
 800346c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003470:	f000 b8da 	b.w	8003628 <__malloc_unlock>
 8003474:	42a3      	cmp	r3, r4
 8003476:	d908      	bls.n	800348a <_free_r+0x46>
 8003478:	6825      	ldr	r5, [r4, #0]
 800347a:	1961      	adds	r1, r4, r5
 800347c:	428b      	cmp	r3, r1
 800347e:	bf01      	itttt	eq
 8003480:	6819      	ldreq	r1, [r3, #0]
 8003482:	685b      	ldreq	r3, [r3, #4]
 8003484:	1949      	addeq	r1, r1, r5
 8003486:	6021      	streq	r1, [r4, #0]
 8003488:	e7ed      	b.n	8003466 <_free_r+0x22>
 800348a:	461a      	mov	r2, r3
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b10b      	cbz	r3, 8003494 <_free_r+0x50>
 8003490:	42a3      	cmp	r3, r4
 8003492:	d9fa      	bls.n	800348a <_free_r+0x46>
 8003494:	6811      	ldr	r1, [r2, #0]
 8003496:	1855      	adds	r5, r2, r1
 8003498:	42a5      	cmp	r5, r4
 800349a:	d10b      	bne.n	80034b4 <_free_r+0x70>
 800349c:	6824      	ldr	r4, [r4, #0]
 800349e:	4421      	add	r1, r4
 80034a0:	1854      	adds	r4, r2, r1
 80034a2:	42a3      	cmp	r3, r4
 80034a4:	6011      	str	r1, [r2, #0]
 80034a6:	d1e0      	bne.n	800346a <_free_r+0x26>
 80034a8:	681c      	ldr	r4, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	6053      	str	r3, [r2, #4]
 80034ae:	440c      	add	r4, r1
 80034b0:	6014      	str	r4, [r2, #0]
 80034b2:	e7da      	b.n	800346a <_free_r+0x26>
 80034b4:	d902      	bls.n	80034bc <_free_r+0x78>
 80034b6:	230c      	movs	r3, #12
 80034b8:	6003      	str	r3, [r0, #0]
 80034ba:	e7d6      	b.n	800346a <_free_r+0x26>
 80034bc:	6825      	ldr	r5, [r4, #0]
 80034be:	1961      	adds	r1, r4, r5
 80034c0:	428b      	cmp	r3, r1
 80034c2:	bf04      	itt	eq
 80034c4:	6819      	ldreq	r1, [r3, #0]
 80034c6:	685b      	ldreq	r3, [r3, #4]
 80034c8:	6063      	str	r3, [r4, #4]
 80034ca:	bf04      	itt	eq
 80034cc:	1949      	addeq	r1, r1, r5
 80034ce:	6021      	streq	r1, [r4, #0]
 80034d0:	6054      	str	r4, [r2, #4]
 80034d2:	e7ca      	b.n	800346a <_free_r+0x26>
 80034d4:	b003      	add	sp, #12
 80034d6:	bd30      	pop	{r4, r5, pc}
 80034d8:	2000041c 	.word	0x2000041c

080034dc <sbrk_aligned>:
 80034dc:	b570      	push	{r4, r5, r6, lr}
 80034de:	4e0e      	ldr	r6, [pc, #56]	; (8003518 <sbrk_aligned+0x3c>)
 80034e0:	460c      	mov	r4, r1
 80034e2:	6831      	ldr	r1, [r6, #0]
 80034e4:	4605      	mov	r5, r0
 80034e6:	b911      	cbnz	r1, 80034ee <sbrk_aligned+0x12>
 80034e8:	f000 fba6 	bl	8003c38 <_sbrk_r>
 80034ec:	6030      	str	r0, [r6, #0]
 80034ee:	4621      	mov	r1, r4
 80034f0:	4628      	mov	r0, r5
 80034f2:	f000 fba1 	bl	8003c38 <_sbrk_r>
 80034f6:	1c43      	adds	r3, r0, #1
 80034f8:	d00a      	beq.n	8003510 <sbrk_aligned+0x34>
 80034fa:	1cc4      	adds	r4, r0, #3
 80034fc:	f024 0403 	bic.w	r4, r4, #3
 8003500:	42a0      	cmp	r0, r4
 8003502:	d007      	beq.n	8003514 <sbrk_aligned+0x38>
 8003504:	1a21      	subs	r1, r4, r0
 8003506:	4628      	mov	r0, r5
 8003508:	f000 fb96 	bl	8003c38 <_sbrk_r>
 800350c:	3001      	adds	r0, #1
 800350e:	d101      	bne.n	8003514 <sbrk_aligned+0x38>
 8003510:	f04f 34ff 	mov.w	r4, #4294967295
 8003514:	4620      	mov	r0, r4
 8003516:	bd70      	pop	{r4, r5, r6, pc}
 8003518:	20000420 	.word	0x20000420

0800351c <_malloc_r>:
 800351c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003520:	1ccd      	adds	r5, r1, #3
 8003522:	f025 0503 	bic.w	r5, r5, #3
 8003526:	3508      	adds	r5, #8
 8003528:	2d0c      	cmp	r5, #12
 800352a:	bf38      	it	cc
 800352c:	250c      	movcc	r5, #12
 800352e:	2d00      	cmp	r5, #0
 8003530:	4607      	mov	r7, r0
 8003532:	db01      	blt.n	8003538 <_malloc_r+0x1c>
 8003534:	42a9      	cmp	r1, r5
 8003536:	d905      	bls.n	8003544 <_malloc_r+0x28>
 8003538:	230c      	movs	r3, #12
 800353a:	603b      	str	r3, [r7, #0]
 800353c:	2600      	movs	r6, #0
 800353e:	4630      	mov	r0, r6
 8003540:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003544:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8003618 <_malloc_r+0xfc>
 8003548:	f000 f868 	bl	800361c <__malloc_lock>
 800354c:	f8d8 3000 	ldr.w	r3, [r8]
 8003550:	461c      	mov	r4, r3
 8003552:	bb5c      	cbnz	r4, 80035ac <_malloc_r+0x90>
 8003554:	4629      	mov	r1, r5
 8003556:	4638      	mov	r0, r7
 8003558:	f7ff ffc0 	bl	80034dc <sbrk_aligned>
 800355c:	1c43      	adds	r3, r0, #1
 800355e:	4604      	mov	r4, r0
 8003560:	d155      	bne.n	800360e <_malloc_r+0xf2>
 8003562:	f8d8 4000 	ldr.w	r4, [r8]
 8003566:	4626      	mov	r6, r4
 8003568:	2e00      	cmp	r6, #0
 800356a:	d145      	bne.n	80035f8 <_malloc_r+0xdc>
 800356c:	2c00      	cmp	r4, #0
 800356e:	d048      	beq.n	8003602 <_malloc_r+0xe6>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	4631      	mov	r1, r6
 8003574:	4638      	mov	r0, r7
 8003576:	eb04 0903 	add.w	r9, r4, r3
 800357a:	f000 fb5d 	bl	8003c38 <_sbrk_r>
 800357e:	4581      	cmp	r9, r0
 8003580:	d13f      	bne.n	8003602 <_malloc_r+0xe6>
 8003582:	6821      	ldr	r1, [r4, #0]
 8003584:	1a6d      	subs	r5, r5, r1
 8003586:	4629      	mov	r1, r5
 8003588:	4638      	mov	r0, r7
 800358a:	f7ff ffa7 	bl	80034dc <sbrk_aligned>
 800358e:	3001      	adds	r0, #1
 8003590:	d037      	beq.n	8003602 <_malloc_r+0xe6>
 8003592:	6823      	ldr	r3, [r4, #0]
 8003594:	442b      	add	r3, r5
 8003596:	6023      	str	r3, [r4, #0]
 8003598:	f8d8 3000 	ldr.w	r3, [r8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d038      	beq.n	8003612 <_malloc_r+0xf6>
 80035a0:	685a      	ldr	r2, [r3, #4]
 80035a2:	42a2      	cmp	r2, r4
 80035a4:	d12b      	bne.n	80035fe <_malloc_r+0xe2>
 80035a6:	2200      	movs	r2, #0
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	e00f      	b.n	80035cc <_malloc_r+0xb0>
 80035ac:	6822      	ldr	r2, [r4, #0]
 80035ae:	1b52      	subs	r2, r2, r5
 80035b0:	d41f      	bmi.n	80035f2 <_malloc_r+0xd6>
 80035b2:	2a0b      	cmp	r2, #11
 80035b4:	d917      	bls.n	80035e6 <_malloc_r+0xca>
 80035b6:	1961      	adds	r1, r4, r5
 80035b8:	42a3      	cmp	r3, r4
 80035ba:	6025      	str	r5, [r4, #0]
 80035bc:	bf18      	it	ne
 80035be:	6059      	strne	r1, [r3, #4]
 80035c0:	6863      	ldr	r3, [r4, #4]
 80035c2:	bf08      	it	eq
 80035c4:	f8c8 1000 	streq.w	r1, [r8]
 80035c8:	5162      	str	r2, [r4, r5]
 80035ca:	604b      	str	r3, [r1, #4]
 80035cc:	4638      	mov	r0, r7
 80035ce:	f104 060b 	add.w	r6, r4, #11
 80035d2:	f000 f829 	bl	8003628 <__malloc_unlock>
 80035d6:	f026 0607 	bic.w	r6, r6, #7
 80035da:	1d23      	adds	r3, r4, #4
 80035dc:	1af2      	subs	r2, r6, r3
 80035de:	d0ae      	beq.n	800353e <_malloc_r+0x22>
 80035e0:	1b9b      	subs	r3, r3, r6
 80035e2:	50a3      	str	r3, [r4, r2]
 80035e4:	e7ab      	b.n	800353e <_malloc_r+0x22>
 80035e6:	42a3      	cmp	r3, r4
 80035e8:	6862      	ldr	r2, [r4, #4]
 80035ea:	d1dd      	bne.n	80035a8 <_malloc_r+0x8c>
 80035ec:	f8c8 2000 	str.w	r2, [r8]
 80035f0:	e7ec      	b.n	80035cc <_malloc_r+0xb0>
 80035f2:	4623      	mov	r3, r4
 80035f4:	6864      	ldr	r4, [r4, #4]
 80035f6:	e7ac      	b.n	8003552 <_malloc_r+0x36>
 80035f8:	4634      	mov	r4, r6
 80035fa:	6876      	ldr	r6, [r6, #4]
 80035fc:	e7b4      	b.n	8003568 <_malloc_r+0x4c>
 80035fe:	4613      	mov	r3, r2
 8003600:	e7cc      	b.n	800359c <_malloc_r+0x80>
 8003602:	230c      	movs	r3, #12
 8003604:	603b      	str	r3, [r7, #0]
 8003606:	4638      	mov	r0, r7
 8003608:	f000 f80e 	bl	8003628 <__malloc_unlock>
 800360c:	e797      	b.n	800353e <_malloc_r+0x22>
 800360e:	6025      	str	r5, [r4, #0]
 8003610:	e7dc      	b.n	80035cc <_malloc_r+0xb0>
 8003612:	605b      	str	r3, [r3, #4]
 8003614:	deff      	udf	#255	; 0xff
 8003616:	bf00      	nop
 8003618:	2000041c 	.word	0x2000041c

0800361c <__malloc_lock>:
 800361c:	4801      	ldr	r0, [pc, #4]	; (8003624 <__malloc_lock+0x8>)
 800361e:	f7ff bef9 	b.w	8003414 <__retarget_lock_acquire_recursive>
 8003622:	bf00      	nop
 8003624:	20000418 	.word	0x20000418

08003628 <__malloc_unlock>:
 8003628:	4801      	ldr	r0, [pc, #4]	; (8003630 <__malloc_unlock+0x8>)
 800362a:	f7ff bef4 	b.w	8003416 <__retarget_lock_release_recursive>
 800362e:	bf00      	nop
 8003630:	20000418 	.word	0x20000418

08003634 <__ssputs_r>:
 8003634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003638:	688e      	ldr	r6, [r1, #8]
 800363a:	461f      	mov	r7, r3
 800363c:	42be      	cmp	r6, r7
 800363e:	680b      	ldr	r3, [r1, #0]
 8003640:	4682      	mov	sl, r0
 8003642:	460c      	mov	r4, r1
 8003644:	4690      	mov	r8, r2
 8003646:	d82c      	bhi.n	80036a2 <__ssputs_r+0x6e>
 8003648:	898a      	ldrh	r2, [r1, #12]
 800364a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800364e:	d026      	beq.n	800369e <__ssputs_r+0x6a>
 8003650:	6965      	ldr	r5, [r4, #20]
 8003652:	6909      	ldr	r1, [r1, #16]
 8003654:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003658:	eba3 0901 	sub.w	r9, r3, r1
 800365c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003660:	1c7b      	adds	r3, r7, #1
 8003662:	444b      	add	r3, r9
 8003664:	106d      	asrs	r5, r5, #1
 8003666:	429d      	cmp	r5, r3
 8003668:	bf38      	it	cc
 800366a:	461d      	movcc	r5, r3
 800366c:	0553      	lsls	r3, r2, #21
 800366e:	d527      	bpl.n	80036c0 <__ssputs_r+0x8c>
 8003670:	4629      	mov	r1, r5
 8003672:	f7ff ff53 	bl	800351c <_malloc_r>
 8003676:	4606      	mov	r6, r0
 8003678:	b360      	cbz	r0, 80036d4 <__ssputs_r+0xa0>
 800367a:	6921      	ldr	r1, [r4, #16]
 800367c:	464a      	mov	r2, r9
 800367e:	f7ff fed3 	bl	8003428 <memcpy>
 8003682:	89a3      	ldrh	r3, [r4, #12]
 8003684:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8003688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800368c:	81a3      	strh	r3, [r4, #12]
 800368e:	6126      	str	r6, [r4, #16]
 8003690:	6165      	str	r5, [r4, #20]
 8003692:	444e      	add	r6, r9
 8003694:	eba5 0509 	sub.w	r5, r5, r9
 8003698:	6026      	str	r6, [r4, #0]
 800369a:	60a5      	str	r5, [r4, #8]
 800369c:	463e      	mov	r6, r7
 800369e:	42be      	cmp	r6, r7
 80036a0:	d900      	bls.n	80036a4 <__ssputs_r+0x70>
 80036a2:	463e      	mov	r6, r7
 80036a4:	6820      	ldr	r0, [r4, #0]
 80036a6:	4632      	mov	r2, r6
 80036a8:	4641      	mov	r1, r8
 80036aa:	f000 faab 	bl	8003c04 <memmove>
 80036ae:	68a3      	ldr	r3, [r4, #8]
 80036b0:	1b9b      	subs	r3, r3, r6
 80036b2:	60a3      	str	r3, [r4, #8]
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	4433      	add	r3, r6
 80036b8:	6023      	str	r3, [r4, #0]
 80036ba:	2000      	movs	r0, #0
 80036bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036c0:	462a      	mov	r2, r5
 80036c2:	f000 fac9 	bl	8003c58 <_realloc_r>
 80036c6:	4606      	mov	r6, r0
 80036c8:	2800      	cmp	r0, #0
 80036ca:	d1e0      	bne.n	800368e <__ssputs_r+0x5a>
 80036cc:	6921      	ldr	r1, [r4, #16]
 80036ce:	4650      	mov	r0, sl
 80036d0:	f7ff feb8 	bl	8003444 <_free_r>
 80036d4:	230c      	movs	r3, #12
 80036d6:	f8ca 3000 	str.w	r3, [sl]
 80036da:	89a3      	ldrh	r3, [r4, #12]
 80036dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036e0:	81a3      	strh	r3, [r4, #12]
 80036e2:	f04f 30ff 	mov.w	r0, #4294967295
 80036e6:	e7e9      	b.n	80036bc <__ssputs_r+0x88>

080036e8 <_svfiprintf_r>:
 80036e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80036ec:	4698      	mov	r8, r3
 80036ee:	898b      	ldrh	r3, [r1, #12]
 80036f0:	061b      	lsls	r3, r3, #24
 80036f2:	b09d      	sub	sp, #116	; 0x74
 80036f4:	4607      	mov	r7, r0
 80036f6:	460d      	mov	r5, r1
 80036f8:	4614      	mov	r4, r2
 80036fa:	d50e      	bpl.n	800371a <_svfiprintf_r+0x32>
 80036fc:	690b      	ldr	r3, [r1, #16]
 80036fe:	b963      	cbnz	r3, 800371a <_svfiprintf_r+0x32>
 8003700:	2140      	movs	r1, #64	; 0x40
 8003702:	f7ff ff0b 	bl	800351c <_malloc_r>
 8003706:	6028      	str	r0, [r5, #0]
 8003708:	6128      	str	r0, [r5, #16]
 800370a:	b920      	cbnz	r0, 8003716 <_svfiprintf_r+0x2e>
 800370c:	230c      	movs	r3, #12
 800370e:	603b      	str	r3, [r7, #0]
 8003710:	f04f 30ff 	mov.w	r0, #4294967295
 8003714:	e0d0      	b.n	80038b8 <_svfiprintf_r+0x1d0>
 8003716:	2340      	movs	r3, #64	; 0x40
 8003718:	616b      	str	r3, [r5, #20]
 800371a:	2300      	movs	r3, #0
 800371c:	9309      	str	r3, [sp, #36]	; 0x24
 800371e:	2320      	movs	r3, #32
 8003720:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003724:	f8cd 800c 	str.w	r8, [sp, #12]
 8003728:	2330      	movs	r3, #48	; 0x30
 800372a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80038d0 <_svfiprintf_r+0x1e8>
 800372e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003732:	f04f 0901 	mov.w	r9, #1
 8003736:	4623      	mov	r3, r4
 8003738:	469a      	mov	sl, r3
 800373a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800373e:	b10a      	cbz	r2, 8003744 <_svfiprintf_r+0x5c>
 8003740:	2a25      	cmp	r2, #37	; 0x25
 8003742:	d1f9      	bne.n	8003738 <_svfiprintf_r+0x50>
 8003744:	ebba 0b04 	subs.w	fp, sl, r4
 8003748:	d00b      	beq.n	8003762 <_svfiprintf_r+0x7a>
 800374a:	465b      	mov	r3, fp
 800374c:	4622      	mov	r2, r4
 800374e:	4629      	mov	r1, r5
 8003750:	4638      	mov	r0, r7
 8003752:	f7ff ff6f 	bl	8003634 <__ssputs_r>
 8003756:	3001      	adds	r0, #1
 8003758:	f000 80a9 	beq.w	80038ae <_svfiprintf_r+0x1c6>
 800375c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800375e:	445a      	add	r2, fp
 8003760:	9209      	str	r2, [sp, #36]	; 0x24
 8003762:	f89a 3000 	ldrb.w	r3, [sl]
 8003766:	2b00      	cmp	r3, #0
 8003768:	f000 80a1 	beq.w	80038ae <_svfiprintf_r+0x1c6>
 800376c:	2300      	movs	r3, #0
 800376e:	f04f 32ff 	mov.w	r2, #4294967295
 8003772:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003776:	f10a 0a01 	add.w	sl, sl, #1
 800377a:	9304      	str	r3, [sp, #16]
 800377c:	9307      	str	r3, [sp, #28]
 800377e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003782:	931a      	str	r3, [sp, #104]	; 0x68
 8003784:	4654      	mov	r4, sl
 8003786:	2205      	movs	r2, #5
 8003788:	f814 1b01 	ldrb.w	r1, [r4], #1
 800378c:	4850      	ldr	r0, [pc, #320]	; (80038d0 <_svfiprintf_r+0x1e8>)
 800378e:	f7fc fd2f 	bl	80001f0 <memchr>
 8003792:	9a04      	ldr	r2, [sp, #16]
 8003794:	b9d8      	cbnz	r0, 80037ce <_svfiprintf_r+0xe6>
 8003796:	06d0      	lsls	r0, r2, #27
 8003798:	bf44      	itt	mi
 800379a:	2320      	movmi	r3, #32
 800379c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037a0:	0711      	lsls	r1, r2, #28
 80037a2:	bf44      	itt	mi
 80037a4:	232b      	movmi	r3, #43	; 0x2b
 80037a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80037aa:	f89a 3000 	ldrb.w	r3, [sl]
 80037ae:	2b2a      	cmp	r3, #42	; 0x2a
 80037b0:	d015      	beq.n	80037de <_svfiprintf_r+0xf6>
 80037b2:	9a07      	ldr	r2, [sp, #28]
 80037b4:	4654      	mov	r4, sl
 80037b6:	2000      	movs	r0, #0
 80037b8:	f04f 0c0a 	mov.w	ip, #10
 80037bc:	4621      	mov	r1, r4
 80037be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80037c2:	3b30      	subs	r3, #48	; 0x30
 80037c4:	2b09      	cmp	r3, #9
 80037c6:	d94d      	bls.n	8003864 <_svfiprintf_r+0x17c>
 80037c8:	b1b0      	cbz	r0, 80037f8 <_svfiprintf_r+0x110>
 80037ca:	9207      	str	r2, [sp, #28]
 80037cc:	e014      	b.n	80037f8 <_svfiprintf_r+0x110>
 80037ce:	eba0 0308 	sub.w	r3, r0, r8
 80037d2:	fa09 f303 	lsl.w	r3, r9, r3
 80037d6:	4313      	orrs	r3, r2
 80037d8:	9304      	str	r3, [sp, #16]
 80037da:	46a2      	mov	sl, r4
 80037dc:	e7d2      	b.n	8003784 <_svfiprintf_r+0x9c>
 80037de:	9b03      	ldr	r3, [sp, #12]
 80037e0:	1d19      	adds	r1, r3, #4
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	9103      	str	r1, [sp, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	bfbb      	ittet	lt
 80037ea:	425b      	neglt	r3, r3
 80037ec:	f042 0202 	orrlt.w	r2, r2, #2
 80037f0:	9307      	strge	r3, [sp, #28]
 80037f2:	9307      	strlt	r3, [sp, #28]
 80037f4:	bfb8      	it	lt
 80037f6:	9204      	strlt	r2, [sp, #16]
 80037f8:	7823      	ldrb	r3, [r4, #0]
 80037fa:	2b2e      	cmp	r3, #46	; 0x2e
 80037fc:	d10c      	bne.n	8003818 <_svfiprintf_r+0x130>
 80037fe:	7863      	ldrb	r3, [r4, #1]
 8003800:	2b2a      	cmp	r3, #42	; 0x2a
 8003802:	d134      	bne.n	800386e <_svfiprintf_r+0x186>
 8003804:	9b03      	ldr	r3, [sp, #12]
 8003806:	1d1a      	adds	r2, r3, #4
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	9203      	str	r2, [sp, #12]
 800380c:	2b00      	cmp	r3, #0
 800380e:	bfb8      	it	lt
 8003810:	f04f 33ff 	movlt.w	r3, #4294967295
 8003814:	3402      	adds	r4, #2
 8003816:	9305      	str	r3, [sp, #20]
 8003818:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80038e0 <_svfiprintf_r+0x1f8>
 800381c:	7821      	ldrb	r1, [r4, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	4650      	mov	r0, sl
 8003822:	f7fc fce5 	bl	80001f0 <memchr>
 8003826:	b138      	cbz	r0, 8003838 <_svfiprintf_r+0x150>
 8003828:	9b04      	ldr	r3, [sp, #16]
 800382a:	eba0 000a 	sub.w	r0, r0, sl
 800382e:	2240      	movs	r2, #64	; 0x40
 8003830:	4082      	lsls	r2, r0
 8003832:	4313      	orrs	r3, r2
 8003834:	3401      	adds	r4, #1
 8003836:	9304      	str	r3, [sp, #16]
 8003838:	f814 1b01 	ldrb.w	r1, [r4], #1
 800383c:	4825      	ldr	r0, [pc, #148]	; (80038d4 <_svfiprintf_r+0x1ec>)
 800383e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003842:	2206      	movs	r2, #6
 8003844:	f7fc fcd4 	bl	80001f0 <memchr>
 8003848:	2800      	cmp	r0, #0
 800384a:	d038      	beq.n	80038be <_svfiprintf_r+0x1d6>
 800384c:	4b22      	ldr	r3, [pc, #136]	; (80038d8 <_svfiprintf_r+0x1f0>)
 800384e:	bb1b      	cbnz	r3, 8003898 <_svfiprintf_r+0x1b0>
 8003850:	9b03      	ldr	r3, [sp, #12]
 8003852:	3307      	adds	r3, #7
 8003854:	f023 0307 	bic.w	r3, r3, #7
 8003858:	3308      	adds	r3, #8
 800385a:	9303      	str	r3, [sp, #12]
 800385c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800385e:	4433      	add	r3, r6
 8003860:	9309      	str	r3, [sp, #36]	; 0x24
 8003862:	e768      	b.n	8003736 <_svfiprintf_r+0x4e>
 8003864:	fb0c 3202 	mla	r2, ip, r2, r3
 8003868:	460c      	mov	r4, r1
 800386a:	2001      	movs	r0, #1
 800386c:	e7a6      	b.n	80037bc <_svfiprintf_r+0xd4>
 800386e:	2300      	movs	r3, #0
 8003870:	3401      	adds	r4, #1
 8003872:	9305      	str	r3, [sp, #20]
 8003874:	4619      	mov	r1, r3
 8003876:	f04f 0c0a 	mov.w	ip, #10
 800387a:	4620      	mov	r0, r4
 800387c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003880:	3a30      	subs	r2, #48	; 0x30
 8003882:	2a09      	cmp	r2, #9
 8003884:	d903      	bls.n	800388e <_svfiprintf_r+0x1a6>
 8003886:	2b00      	cmp	r3, #0
 8003888:	d0c6      	beq.n	8003818 <_svfiprintf_r+0x130>
 800388a:	9105      	str	r1, [sp, #20]
 800388c:	e7c4      	b.n	8003818 <_svfiprintf_r+0x130>
 800388e:	fb0c 2101 	mla	r1, ip, r1, r2
 8003892:	4604      	mov	r4, r0
 8003894:	2301      	movs	r3, #1
 8003896:	e7f0      	b.n	800387a <_svfiprintf_r+0x192>
 8003898:	ab03      	add	r3, sp, #12
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	462a      	mov	r2, r5
 800389e:	4b0f      	ldr	r3, [pc, #60]	; (80038dc <_svfiprintf_r+0x1f4>)
 80038a0:	a904      	add	r1, sp, #16
 80038a2:	4638      	mov	r0, r7
 80038a4:	f3af 8000 	nop.w
 80038a8:	1c42      	adds	r2, r0, #1
 80038aa:	4606      	mov	r6, r0
 80038ac:	d1d6      	bne.n	800385c <_svfiprintf_r+0x174>
 80038ae:	89ab      	ldrh	r3, [r5, #12]
 80038b0:	065b      	lsls	r3, r3, #25
 80038b2:	f53f af2d 	bmi.w	8003710 <_svfiprintf_r+0x28>
 80038b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80038b8:	b01d      	add	sp, #116	; 0x74
 80038ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038be:	ab03      	add	r3, sp, #12
 80038c0:	9300      	str	r3, [sp, #0]
 80038c2:	462a      	mov	r2, r5
 80038c4:	4b05      	ldr	r3, [pc, #20]	; (80038dc <_svfiprintf_r+0x1f4>)
 80038c6:	a904      	add	r1, sp, #16
 80038c8:	4638      	mov	r0, r7
 80038ca:	f000 f879 	bl	80039c0 <_printf_i>
 80038ce:	e7eb      	b.n	80038a8 <_svfiprintf_r+0x1c0>
 80038d0:	08003e9c 	.word	0x08003e9c
 80038d4:	08003ea6 	.word	0x08003ea6
 80038d8:	00000000 	.word	0x00000000
 80038dc:	08003635 	.word	0x08003635
 80038e0:	08003ea2 	.word	0x08003ea2

080038e4 <_printf_common>:
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	4616      	mov	r6, r2
 80038ea:	4699      	mov	r9, r3
 80038ec:	688a      	ldr	r2, [r1, #8]
 80038ee:	690b      	ldr	r3, [r1, #16]
 80038f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038f4:	4293      	cmp	r3, r2
 80038f6:	bfb8      	it	lt
 80038f8:	4613      	movlt	r3, r2
 80038fa:	6033      	str	r3, [r6, #0]
 80038fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003900:	4607      	mov	r7, r0
 8003902:	460c      	mov	r4, r1
 8003904:	b10a      	cbz	r2, 800390a <_printf_common+0x26>
 8003906:	3301      	adds	r3, #1
 8003908:	6033      	str	r3, [r6, #0]
 800390a:	6823      	ldr	r3, [r4, #0]
 800390c:	0699      	lsls	r1, r3, #26
 800390e:	bf42      	ittt	mi
 8003910:	6833      	ldrmi	r3, [r6, #0]
 8003912:	3302      	addmi	r3, #2
 8003914:	6033      	strmi	r3, [r6, #0]
 8003916:	6825      	ldr	r5, [r4, #0]
 8003918:	f015 0506 	ands.w	r5, r5, #6
 800391c:	d106      	bne.n	800392c <_printf_common+0x48>
 800391e:	f104 0a19 	add.w	sl, r4, #25
 8003922:	68e3      	ldr	r3, [r4, #12]
 8003924:	6832      	ldr	r2, [r6, #0]
 8003926:	1a9b      	subs	r3, r3, r2
 8003928:	42ab      	cmp	r3, r5
 800392a:	dc26      	bgt.n	800397a <_printf_common+0x96>
 800392c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003930:	1e13      	subs	r3, r2, #0
 8003932:	6822      	ldr	r2, [r4, #0]
 8003934:	bf18      	it	ne
 8003936:	2301      	movne	r3, #1
 8003938:	0692      	lsls	r2, r2, #26
 800393a:	d42b      	bmi.n	8003994 <_printf_common+0xb0>
 800393c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003940:	4649      	mov	r1, r9
 8003942:	4638      	mov	r0, r7
 8003944:	47c0      	blx	r8
 8003946:	3001      	adds	r0, #1
 8003948:	d01e      	beq.n	8003988 <_printf_common+0xa4>
 800394a:	6823      	ldr	r3, [r4, #0]
 800394c:	6922      	ldr	r2, [r4, #16]
 800394e:	f003 0306 	and.w	r3, r3, #6
 8003952:	2b04      	cmp	r3, #4
 8003954:	bf02      	ittt	eq
 8003956:	68e5      	ldreq	r5, [r4, #12]
 8003958:	6833      	ldreq	r3, [r6, #0]
 800395a:	1aed      	subeq	r5, r5, r3
 800395c:	68a3      	ldr	r3, [r4, #8]
 800395e:	bf0c      	ite	eq
 8003960:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003964:	2500      	movne	r5, #0
 8003966:	4293      	cmp	r3, r2
 8003968:	bfc4      	itt	gt
 800396a:	1a9b      	subgt	r3, r3, r2
 800396c:	18ed      	addgt	r5, r5, r3
 800396e:	2600      	movs	r6, #0
 8003970:	341a      	adds	r4, #26
 8003972:	42b5      	cmp	r5, r6
 8003974:	d11a      	bne.n	80039ac <_printf_common+0xc8>
 8003976:	2000      	movs	r0, #0
 8003978:	e008      	b.n	800398c <_printf_common+0xa8>
 800397a:	2301      	movs	r3, #1
 800397c:	4652      	mov	r2, sl
 800397e:	4649      	mov	r1, r9
 8003980:	4638      	mov	r0, r7
 8003982:	47c0      	blx	r8
 8003984:	3001      	adds	r0, #1
 8003986:	d103      	bne.n	8003990 <_printf_common+0xac>
 8003988:	f04f 30ff 	mov.w	r0, #4294967295
 800398c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003990:	3501      	adds	r5, #1
 8003992:	e7c6      	b.n	8003922 <_printf_common+0x3e>
 8003994:	18e1      	adds	r1, r4, r3
 8003996:	1c5a      	adds	r2, r3, #1
 8003998:	2030      	movs	r0, #48	; 0x30
 800399a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800399e:	4422      	add	r2, r4
 80039a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80039a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80039a8:	3302      	adds	r3, #2
 80039aa:	e7c7      	b.n	800393c <_printf_common+0x58>
 80039ac:	2301      	movs	r3, #1
 80039ae:	4622      	mov	r2, r4
 80039b0:	4649      	mov	r1, r9
 80039b2:	4638      	mov	r0, r7
 80039b4:	47c0      	blx	r8
 80039b6:	3001      	adds	r0, #1
 80039b8:	d0e6      	beq.n	8003988 <_printf_common+0xa4>
 80039ba:	3601      	adds	r6, #1
 80039bc:	e7d9      	b.n	8003972 <_printf_common+0x8e>
	...

080039c0 <_printf_i>:
 80039c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80039c4:	7e0f      	ldrb	r7, [r1, #24]
 80039c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80039c8:	2f78      	cmp	r7, #120	; 0x78
 80039ca:	4691      	mov	r9, r2
 80039cc:	4680      	mov	r8, r0
 80039ce:	460c      	mov	r4, r1
 80039d0:	469a      	mov	sl, r3
 80039d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80039d6:	d807      	bhi.n	80039e8 <_printf_i+0x28>
 80039d8:	2f62      	cmp	r7, #98	; 0x62
 80039da:	d80a      	bhi.n	80039f2 <_printf_i+0x32>
 80039dc:	2f00      	cmp	r7, #0
 80039de:	f000 80d4 	beq.w	8003b8a <_printf_i+0x1ca>
 80039e2:	2f58      	cmp	r7, #88	; 0x58
 80039e4:	f000 80c0 	beq.w	8003b68 <_printf_i+0x1a8>
 80039e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80039f0:	e03a      	b.n	8003a68 <_printf_i+0xa8>
 80039f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80039f6:	2b15      	cmp	r3, #21
 80039f8:	d8f6      	bhi.n	80039e8 <_printf_i+0x28>
 80039fa:	a101      	add	r1, pc, #4	; (adr r1, 8003a00 <_printf_i+0x40>)
 80039fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a00:	08003a59 	.word	0x08003a59
 8003a04:	08003a6d 	.word	0x08003a6d
 8003a08:	080039e9 	.word	0x080039e9
 8003a0c:	080039e9 	.word	0x080039e9
 8003a10:	080039e9 	.word	0x080039e9
 8003a14:	080039e9 	.word	0x080039e9
 8003a18:	08003a6d 	.word	0x08003a6d
 8003a1c:	080039e9 	.word	0x080039e9
 8003a20:	080039e9 	.word	0x080039e9
 8003a24:	080039e9 	.word	0x080039e9
 8003a28:	080039e9 	.word	0x080039e9
 8003a2c:	08003b71 	.word	0x08003b71
 8003a30:	08003a99 	.word	0x08003a99
 8003a34:	08003b2b 	.word	0x08003b2b
 8003a38:	080039e9 	.word	0x080039e9
 8003a3c:	080039e9 	.word	0x080039e9
 8003a40:	08003b93 	.word	0x08003b93
 8003a44:	080039e9 	.word	0x080039e9
 8003a48:	08003a99 	.word	0x08003a99
 8003a4c:	080039e9 	.word	0x080039e9
 8003a50:	080039e9 	.word	0x080039e9
 8003a54:	08003b33 	.word	0x08003b33
 8003a58:	682b      	ldr	r3, [r5, #0]
 8003a5a:	1d1a      	adds	r2, r3, #4
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	602a      	str	r2, [r5, #0]
 8003a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e09f      	b.n	8003bac <_printf_i+0x1ec>
 8003a6c:	6820      	ldr	r0, [r4, #0]
 8003a6e:	682b      	ldr	r3, [r5, #0]
 8003a70:	0607      	lsls	r7, r0, #24
 8003a72:	f103 0104 	add.w	r1, r3, #4
 8003a76:	6029      	str	r1, [r5, #0]
 8003a78:	d501      	bpl.n	8003a7e <_printf_i+0xbe>
 8003a7a:	681e      	ldr	r6, [r3, #0]
 8003a7c:	e003      	b.n	8003a86 <_printf_i+0xc6>
 8003a7e:	0646      	lsls	r6, r0, #25
 8003a80:	d5fb      	bpl.n	8003a7a <_printf_i+0xba>
 8003a82:	f9b3 6000 	ldrsh.w	r6, [r3]
 8003a86:	2e00      	cmp	r6, #0
 8003a88:	da03      	bge.n	8003a92 <_printf_i+0xd2>
 8003a8a:	232d      	movs	r3, #45	; 0x2d
 8003a8c:	4276      	negs	r6, r6
 8003a8e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a92:	485a      	ldr	r0, [pc, #360]	; (8003bfc <_printf_i+0x23c>)
 8003a94:	230a      	movs	r3, #10
 8003a96:	e012      	b.n	8003abe <_printf_i+0xfe>
 8003a98:	682b      	ldr	r3, [r5, #0]
 8003a9a:	6820      	ldr	r0, [r4, #0]
 8003a9c:	1d19      	adds	r1, r3, #4
 8003a9e:	6029      	str	r1, [r5, #0]
 8003aa0:	0605      	lsls	r5, r0, #24
 8003aa2:	d501      	bpl.n	8003aa8 <_printf_i+0xe8>
 8003aa4:	681e      	ldr	r6, [r3, #0]
 8003aa6:	e002      	b.n	8003aae <_printf_i+0xee>
 8003aa8:	0641      	lsls	r1, r0, #25
 8003aaa:	d5fb      	bpl.n	8003aa4 <_printf_i+0xe4>
 8003aac:	881e      	ldrh	r6, [r3, #0]
 8003aae:	4853      	ldr	r0, [pc, #332]	; (8003bfc <_printf_i+0x23c>)
 8003ab0:	2f6f      	cmp	r7, #111	; 0x6f
 8003ab2:	bf0c      	ite	eq
 8003ab4:	2308      	moveq	r3, #8
 8003ab6:	230a      	movne	r3, #10
 8003ab8:	2100      	movs	r1, #0
 8003aba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003abe:	6865      	ldr	r5, [r4, #4]
 8003ac0:	60a5      	str	r5, [r4, #8]
 8003ac2:	2d00      	cmp	r5, #0
 8003ac4:	bfa2      	ittt	ge
 8003ac6:	6821      	ldrge	r1, [r4, #0]
 8003ac8:	f021 0104 	bicge.w	r1, r1, #4
 8003acc:	6021      	strge	r1, [r4, #0]
 8003ace:	b90e      	cbnz	r6, 8003ad4 <_printf_i+0x114>
 8003ad0:	2d00      	cmp	r5, #0
 8003ad2:	d04b      	beq.n	8003b6c <_printf_i+0x1ac>
 8003ad4:	4615      	mov	r5, r2
 8003ad6:	fbb6 f1f3 	udiv	r1, r6, r3
 8003ada:	fb03 6711 	mls	r7, r3, r1, r6
 8003ade:	5dc7      	ldrb	r7, [r0, r7]
 8003ae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003ae4:	4637      	mov	r7, r6
 8003ae6:	42bb      	cmp	r3, r7
 8003ae8:	460e      	mov	r6, r1
 8003aea:	d9f4      	bls.n	8003ad6 <_printf_i+0x116>
 8003aec:	2b08      	cmp	r3, #8
 8003aee:	d10b      	bne.n	8003b08 <_printf_i+0x148>
 8003af0:	6823      	ldr	r3, [r4, #0]
 8003af2:	07de      	lsls	r6, r3, #31
 8003af4:	d508      	bpl.n	8003b08 <_printf_i+0x148>
 8003af6:	6923      	ldr	r3, [r4, #16]
 8003af8:	6861      	ldr	r1, [r4, #4]
 8003afa:	4299      	cmp	r1, r3
 8003afc:	bfde      	ittt	le
 8003afe:	2330      	movle	r3, #48	; 0x30
 8003b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003b08:	1b52      	subs	r2, r2, r5
 8003b0a:	6122      	str	r2, [r4, #16]
 8003b0c:	f8cd a000 	str.w	sl, [sp]
 8003b10:	464b      	mov	r3, r9
 8003b12:	aa03      	add	r2, sp, #12
 8003b14:	4621      	mov	r1, r4
 8003b16:	4640      	mov	r0, r8
 8003b18:	f7ff fee4 	bl	80038e4 <_printf_common>
 8003b1c:	3001      	adds	r0, #1
 8003b1e:	d14a      	bne.n	8003bb6 <_printf_i+0x1f6>
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295
 8003b24:	b004      	add	sp, #16
 8003b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b2a:	6823      	ldr	r3, [r4, #0]
 8003b2c:	f043 0320 	orr.w	r3, r3, #32
 8003b30:	6023      	str	r3, [r4, #0]
 8003b32:	4833      	ldr	r0, [pc, #204]	; (8003c00 <_printf_i+0x240>)
 8003b34:	2778      	movs	r7, #120	; 0x78
 8003b36:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003b3a:	6823      	ldr	r3, [r4, #0]
 8003b3c:	6829      	ldr	r1, [r5, #0]
 8003b3e:	061f      	lsls	r7, r3, #24
 8003b40:	f851 6b04 	ldr.w	r6, [r1], #4
 8003b44:	d402      	bmi.n	8003b4c <_printf_i+0x18c>
 8003b46:	065f      	lsls	r7, r3, #25
 8003b48:	bf48      	it	mi
 8003b4a:	b2b6      	uxthmi	r6, r6
 8003b4c:	07df      	lsls	r7, r3, #31
 8003b4e:	bf48      	it	mi
 8003b50:	f043 0320 	orrmi.w	r3, r3, #32
 8003b54:	6029      	str	r1, [r5, #0]
 8003b56:	bf48      	it	mi
 8003b58:	6023      	strmi	r3, [r4, #0]
 8003b5a:	b91e      	cbnz	r6, 8003b64 <_printf_i+0x1a4>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	f023 0320 	bic.w	r3, r3, #32
 8003b62:	6023      	str	r3, [r4, #0]
 8003b64:	2310      	movs	r3, #16
 8003b66:	e7a7      	b.n	8003ab8 <_printf_i+0xf8>
 8003b68:	4824      	ldr	r0, [pc, #144]	; (8003bfc <_printf_i+0x23c>)
 8003b6a:	e7e4      	b.n	8003b36 <_printf_i+0x176>
 8003b6c:	4615      	mov	r5, r2
 8003b6e:	e7bd      	b.n	8003aec <_printf_i+0x12c>
 8003b70:	682b      	ldr	r3, [r5, #0]
 8003b72:	6826      	ldr	r6, [r4, #0]
 8003b74:	6961      	ldr	r1, [r4, #20]
 8003b76:	1d18      	adds	r0, r3, #4
 8003b78:	6028      	str	r0, [r5, #0]
 8003b7a:	0635      	lsls	r5, r6, #24
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	d501      	bpl.n	8003b84 <_printf_i+0x1c4>
 8003b80:	6019      	str	r1, [r3, #0]
 8003b82:	e002      	b.n	8003b8a <_printf_i+0x1ca>
 8003b84:	0670      	lsls	r0, r6, #25
 8003b86:	d5fb      	bpl.n	8003b80 <_printf_i+0x1c0>
 8003b88:	8019      	strh	r1, [r3, #0]
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	6123      	str	r3, [r4, #16]
 8003b8e:	4615      	mov	r5, r2
 8003b90:	e7bc      	b.n	8003b0c <_printf_i+0x14c>
 8003b92:	682b      	ldr	r3, [r5, #0]
 8003b94:	1d1a      	adds	r2, r3, #4
 8003b96:	602a      	str	r2, [r5, #0]
 8003b98:	681d      	ldr	r5, [r3, #0]
 8003b9a:	6862      	ldr	r2, [r4, #4]
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4628      	mov	r0, r5
 8003ba0:	f7fc fb26 	bl	80001f0 <memchr>
 8003ba4:	b108      	cbz	r0, 8003baa <_printf_i+0x1ea>
 8003ba6:	1b40      	subs	r0, r0, r5
 8003ba8:	6060      	str	r0, [r4, #4]
 8003baa:	6863      	ldr	r3, [r4, #4]
 8003bac:	6123      	str	r3, [r4, #16]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003bb4:	e7aa      	b.n	8003b0c <_printf_i+0x14c>
 8003bb6:	6923      	ldr	r3, [r4, #16]
 8003bb8:	462a      	mov	r2, r5
 8003bba:	4649      	mov	r1, r9
 8003bbc:	4640      	mov	r0, r8
 8003bbe:	47d0      	blx	sl
 8003bc0:	3001      	adds	r0, #1
 8003bc2:	d0ad      	beq.n	8003b20 <_printf_i+0x160>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	079b      	lsls	r3, r3, #30
 8003bc8:	d413      	bmi.n	8003bf2 <_printf_i+0x232>
 8003bca:	68e0      	ldr	r0, [r4, #12]
 8003bcc:	9b03      	ldr	r3, [sp, #12]
 8003bce:	4298      	cmp	r0, r3
 8003bd0:	bfb8      	it	lt
 8003bd2:	4618      	movlt	r0, r3
 8003bd4:	e7a6      	b.n	8003b24 <_printf_i+0x164>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	4632      	mov	r2, r6
 8003bda:	4649      	mov	r1, r9
 8003bdc:	4640      	mov	r0, r8
 8003bde:	47d0      	blx	sl
 8003be0:	3001      	adds	r0, #1
 8003be2:	d09d      	beq.n	8003b20 <_printf_i+0x160>
 8003be4:	3501      	adds	r5, #1
 8003be6:	68e3      	ldr	r3, [r4, #12]
 8003be8:	9903      	ldr	r1, [sp, #12]
 8003bea:	1a5b      	subs	r3, r3, r1
 8003bec:	42ab      	cmp	r3, r5
 8003bee:	dcf2      	bgt.n	8003bd6 <_printf_i+0x216>
 8003bf0:	e7eb      	b.n	8003bca <_printf_i+0x20a>
 8003bf2:	2500      	movs	r5, #0
 8003bf4:	f104 0619 	add.w	r6, r4, #25
 8003bf8:	e7f5      	b.n	8003be6 <_printf_i+0x226>
 8003bfa:	bf00      	nop
 8003bfc:	08003ead 	.word	0x08003ead
 8003c00:	08003ebe 	.word	0x08003ebe

08003c04 <memmove>:
 8003c04:	4288      	cmp	r0, r1
 8003c06:	b510      	push	{r4, lr}
 8003c08:	eb01 0402 	add.w	r4, r1, r2
 8003c0c:	d902      	bls.n	8003c14 <memmove+0x10>
 8003c0e:	4284      	cmp	r4, r0
 8003c10:	4623      	mov	r3, r4
 8003c12:	d807      	bhi.n	8003c24 <memmove+0x20>
 8003c14:	1e43      	subs	r3, r0, #1
 8003c16:	42a1      	cmp	r1, r4
 8003c18:	d008      	beq.n	8003c2c <memmove+0x28>
 8003c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003c22:	e7f8      	b.n	8003c16 <memmove+0x12>
 8003c24:	4402      	add	r2, r0
 8003c26:	4601      	mov	r1, r0
 8003c28:	428a      	cmp	r2, r1
 8003c2a:	d100      	bne.n	8003c2e <memmove+0x2a>
 8003c2c:	bd10      	pop	{r4, pc}
 8003c2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003c32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003c36:	e7f7      	b.n	8003c28 <memmove+0x24>

08003c38 <_sbrk_r>:
 8003c38:	b538      	push	{r3, r4, r5, lr}
 8003c3a:	4d06      	ldr	r5, [pc, #24]	; (8003c54 <_sbrk_r+0x1c>)
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	4604      	mov	r4, r0
 8003c40:	4608      	mov	r0, r1
 8003c42:	602b      	str	r3, [r5, #0]
 8003c44:	f7fd fa46 	bl	80010d4 <_sbrk>
 8003c48:	1c43      	adds	r3, r0, #1
 8003c4a:	d102      	bne.n	8003c52 <_sbrk_r+0x1a>
 8003c4c:	682b      	ldr	r3, [r5, #0]
 8003c4e:	b103      	cbz	r3, 8003c52 <_sbrk_r+0x1a>
 8003c50:	6023      	str	r3, [r4, #0]
 8003c52:	bd38      	pop	{r3, r4, r5, pc}
 8003c54:	20000414 	.word	0x20000414

08003c58 <_realloc_r>:
 8003c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c5c:	4680      	mov	r8, r0
 8003c5e:	4614      	mov	r4, r2
 8003c60:	460e      	mov	r6, r1
 8003c62:	b921      	cbnz	r1, 8003c6e <_realloc_r+0x16>
 8003c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c68:	4611      	mov	r1, r2
 8003c6a:	f7ff bc57 	b.w	800351c <_malloc_r>
 8003c6e:	b92a      	cbnz	r2, 8003c7c <_realloc_r+0x24>
 8003c70:	f7ff fbe8 	bl	8003444 <_free_r>
 8003c74:	4625      	mov	r5, r4
 8003c76:	4628      	mov	r0, r5
 8003c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c7c:	f000 f81b 	bl	8003cb6 <_malloc_usable_size_r>
 8003c80:	4284      	cmp	r4, r0
 8003c82:	4607      	mov	r7, r0
 8003c84:	d802      	bhi.n	8003c8c <_realloc_r+0x34>
 8003c86:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003c8a:	d812      	bhi.n	8003cb2 <_realloc_r+0x5a>
 8003c8c:	4621      	mov	r1, r4
 8003c8e:	4640      	mov	r0, r8
 8003c90:	f7ff fc44 	bl	800351c <_malloc_r>
 8003c94:	4605      	mov	r5, r0
 8003c96:	2800      	cmp	r0, #0
 8003c98:	d0ed      	beq.n	8003c76 <_realloc_r+0x1e>
 8003c9a:	42bc      	cmp	r4, r7
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	4631      	mov	r1, r6
 8003ca0:	bf28      	it	cs
 8003ca2:	463a      	movcs	r2, r7
 8003ca4:	f7ff fbc0 	bl	8003428 <memcpy>
 8003ca8:	4631      	mov	r1, r6
 8003caa:	4640      	mov	r0, r8
 8003cac:	f7ff fbca 	bl	8003444 <_free_r>
 8003cb0:	e7e1      	b.n	8003c76 <_realloc_r+0x1e>
 8003cb2:	4635      	mov	r5, r6
 8003cb4:	e7df      	b.n	8003c76 <_realloc_r+0x1e>

08003cb6 <_malloc_usable_size_r>:
 8003cb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cba:	1f18      	subs	r0, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	bfbc      	itt	lt
 8003cc0:	580b      	ldrlt	r3, [r1, r0]
 8003cc2:	18c0      	addlt	r0, r0, r3
 8003cc4:	4770      	bx	lr
	...

08003cc8 <_init>:
 8003cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cca:	bf00      	nop
 8003ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cce:	bc08      	pop	{r3}
 8003cd0:	469e      	mov	lr, r3
 8003cd2:	4770      	bx	lr

08003cd4 <_fini>:
 8003cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cd6:	bf00      	nop
 8003cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cda:	bc08      	pop	{r3}
 8003cdc:	469e      	mov	lr, r3
 8003cde:	4770      	bx	lr
